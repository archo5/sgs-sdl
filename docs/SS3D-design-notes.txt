SGS3D

ANIMATION SYSTEM

each node is a generator of skinned matrices for a specific mesh:
- contains array of output matrices
- can be repurposed for a different mesh at any time
- can generate matrices for current time and advance time forward (maybe backwards too, in the future)
- can generate factors for blending/using only specific parts of the matrix
each node may or may not accept any amount and type of child nodes:
- each child node is triggered on repurposing/advancing/generation

interface AnimNode
{
	- Setup( bonenamelist ) => resize output
	- Advance( t ) => do nothing by default
	- Generate() => fill output with identity matrices by default and set all factors to 0
	
	+ Mat4[] output
	+ float[] factors
}

class MixerNode : AnimNode
{
	- Setup( bonenamelist ) => <inherited>, resize inputs
	- Advance( t ) => advance inputs
	- Generate() => generate inputs, mix to output
	
	- AddInput( node, mode, mult ) => InsertInput( 0, .. )
	- InsertInput( pos, node, mode, mult ) => validate index, create/insert input
	- RemoveInputs( from, to ) => ...
	
	+ { AnimNode, blend mode, factor multiplier }[] inputs
}

class PlayerNode : AnimNode
{
	- Setup( bonenamelist ) => <inherited>, store this data
	- Advance( t ) => add to time, handle wrapping
	- Generate() => sample animation at current time
	
	.. TODO ..
	
	+ float time
	+ string[] bones
}


PER-INSTANCE RENDER DATA

- 4 textures (8-11)
	+ only available on base passes
	- texture 8 assumed to be envmap by default
		+ or better yet, assume nothing - leave it up to the shaders to set ambient specular lighting
- some pixel shader constants (for colors, maybe some matrices, some random data)
	+ 4 matrices (16 float4 lines) should be enough
	+ ALWAYS available (base passes or otherwise - they must be accessible to the shader)

# the interface #

- the 4 textures are just a list of textures
- constants are write-only, possible to set from int/real,vec2,vec3,vec4,color,mat4,floatarray at any float4-rounded offset that would not create overflow
	(mat4 at offset 2 is fine, mat4 at offset 13 is not - offset 16 marks end of data)


===END===

CULLING SYSTEM

- culling should be separate, vectorized and most of all, it should be possible to mix-and-match methods and add new ones

list of data that can be stored without much effort:
- bounding box
- bounding volume

no guarantees can be made about their correctness, however it should be possible to pull that data out of the same kind of data that would be passed for setVertexData in meshes
- generateAABB( vertexdata, vdecl )
- generateBoundingSphere( vertexdata, vdecl )

>> culling method #1: bounding volume tests (frustum/OBB/sphere combos)
object combos:
- camera/mesh (frustum/OBB)
- camera/point light (frustum/sphere)
- camera/spotlight (frustum/frustum)
- mesh/point light (OBB/sphere)
- mesh/spotlight (OBB/frustum)

this reminds me that different methods need different amount of overrides
- lights don't necessarily need occlusion culling but it might benefit if done optionally
- depending on the type, only point-volume methods may work (so far there is no place for volume-volume methods but let's not close doors just yet)
- also, in-development methods would benefit from partial implementations

#### cullscene vectorization ####
- data in: relevant (non-disabled) volumes and volume arrays
- data out: packed bitfields
! bitfields are AND-merged and bounced back to origin (so far I don't see any other way to guarantee some stability, considering that mesh instances could be disabled manually between cull/render)

#### cullscene interface ####
> generally there are two methods
- a list for each function
- a list for function groups
> former is easier to handle, latter is easier to debug
debuggability depends on possibility to disable any culling function
! also need quick ordering
> let's go with "cullscene group arrays with properties for usage of each function

brainfart: we don't want more complex culling functions to work on already-culled data
> cullscenes should be called in the specified order, using bitfields to reduce input for the following cullscenes
> what's left the end is merely a list of pointers containing the visible objects
**** TO CLARIFY: CullScene = group of culling functions and associated data ****
! associability will be guaranteed by pointer/type inclusion into volume data, considering that after several runs, cullscene output won't be related to the enabled objects list (except in order)

!! another important thing to mention: cullscenes are just interface structures; the default ones can be cloned and have their functions swapped, they won't use the user data pointer just in case that happens

!! and something else: cullscene does not deal in SGScript functions due to the fact that there's no way any benefits can be found in a considerably heavily (more than once) memory-allocating system
!! -- though it will be an object that can be modified in SGScript, all function pointers will be of `pointer` type, as will the data pointer; boolean attributes will internally be a bitfield

#### issue 1: light <-> mesh maps & cullscenes ####
> description
- all lights are stored in an array (both point lights and spotlights, possibly others in the future)
- all light types must be culled separately against frustum and meshes
- how to associate the data? all we really need to do is to reintegrate the culling results as far as rendering function is concerned...
- this essentially means that a VISIBLE/CULLED VALUE must correspond to each INDEX OR POINTER or a LIST OF VISIBLE POINTERS must be accessible
> options
:A: return the list of visible pointers from the culling function, do no writebacks to source data


===END===

LIGHTING SYSTEM

Ability to combine various models and multiplications of such
Modelling custom pass schemes is a must (!)

/// DIRAMB: directional ambient lighting solution; SH or colors for all 6 directions (most likely latter)
// 6 color method:
//   fx_positive = saturate( normal.x ); fx_negative = saturate( -normal.x ); ...
//   total_ambient = color_x_positive * fx_positive + ...
//   total_ambient /= total_ambient.w; // normalize this way instead of squaring factors to make it smoother
// ===

Example #1:

PASS1: [SOLID,STATIC] LIGHTMAP + SUN + 0-16 POINT LIGHTS (once)
PASS2: [SOLID,DYNAMIC] DIRAMB + SUN + 0-16 POINT LIGHTS (once)
PASS3: [SOLID,ANY] 0-16 POINT LIGHTS (as much as necessary)
PASS4: [SOLID,ANY] 0-4 SPOT LIGHTS (as much as necessary)
PASS5: [DEPTH] FOG
PASS6: [TRANSPARENT,ANY] DIRAMB + SUN + 0-16 POINT LIGHTS (once)
PASS7: [TRANSPARENT,ANY] 0-16 POINT LIGHTS (as much as necessary)
PASS8: [TRANSPARENT,ANY] 0-4 SPOT LIGHTS (as much as necessary)

Example #2:

PASS1-5 as in Example #1
PASS6: [TRANSPARENT,ANY] DIRAMB-DYNAMIC

--------------
To make this happen, pass specifications must be created:

OBJECT PASS
{
	material type: solid / transparent / both
	object type: static / dynamic / both
	
	point light data start (constant id)
	max. point light count (0-128?)
	spot light data start (constant id)
	max. spot light count (0-4) // shadow / cookie texture limits
	lightmap (0-4 per-instance textures)
	diramb (constant id or -1 if not used)
	
	pixel shader stub name
}
SCREEN PASS
{
	shader name
}
CONTROL PASS
{
	type: reset light counts
}

--------------
Potential issues

- light queueing and culling

for example, there's one object lit by one point light and another object lit by another one

L1      L2
 |      |
O1      O2

how will such pass configurations react to this?

- given their vaguely descriptive nature, they could suggest that:
> PASS with [pointlight=16] comes
>> for each object, render as much point lights as possible with this pass
! solved

-- but what about ambient + lit?
-- should be exactly the same

either way, there HAS TO BE an object/light queue table

- proposed data structure?
ARRAY of LIGHT*
> mesh instances store their entry point / light counts (or, rather, entry point and end point)
> in the frame, they can use the pointer to R/W their light info
> disabled lights/instances don't get to have anything, enabled ones MUST have valid range

--------------
Shader code interface

INPUTS:
- Textures [0-15]
- Constants (passed data)
- Vertex (interpolated) attributes (view position, texcoord, vertex color, TBN matrix)
OUTPUTS:
- diffuse color (default=0.7)
- opacity (default=1)
- specular color (default=0.3)
- specular power (default=32)
- surface normal (default=0;0;1)
- distortion vector (default=0;0)
- ambient diffuse light (default=0;0;0)

--------------
Shadow mapping in the engine
- lots of settings to change for the texture, possibly with extensions
- for the light - just one, whether shadows are necessary
- different situation for the directional light but there's only one such light and technically, it's not even a light
--- to be revisited, right now concerned about spotlight shadows
! NEED a render target texture
> must be a natural extension of a basic texture; possible to use it anywhere
> need to build a RTT system first, attaching it to a light would just automate the process
--- culling efforts should not be doubled! in render(): first cull all (by building mesh/light tables), then do light shadow fast path, then do main passes and post-processing in the end

--------------
RTT system:
renderer.createRT( width, height, format ), returns RT/texture-compatible object
renderer.currentRT - render target to render to

===END===


OBJECT OWNERSHIP

- generally, no object owns another object -> weak references
	- the only exception is properties - they must be GC-safe
- all sub-objects can be destroyed remotely
- main algorithms:
	> object-create: add object pointer to set
	> object-destroy: invoke object's destructor
	> object-destruct: if not destroying, remove object pointer from set; destruct object's internal representation
	> manager-create: create set, set destroying to 0
	> manager-destroy: set destroying to 1, delete set

===END===


enum s3dLightType
{
	S3DLIGHT_POINT
	S3DLIGHT_SPOT
	S3DLIGHT_DIRECT
}

enum s3dIndexType
{
	S3DINDEX_16
	S3DINDEX_32
}

class s3dVertexFormat
{
	...
}

class s3dShader
{
	...
}

class s3dMaterial
{
	- [int] shaders
}

class s3dMesh
{
	+ setVertexData( buf, fmt )
	+ setIndexData( buf, fmt : s3dIndexType )
	+ setNumParts( num )
	+ setPartData( from, to, material, textures )
}

class s3dMeshInstance
{
	- mesh
	- matrix
	- color
}

class s3dLight
{
	- type : s3dLightType
	- isEnabled
	- position
	- direction
	- color
	- radius
	- power
	- minangle
	- maxangle
	- cookieTexture
	- projMatrix
	- hasShadows
}

class s3dCullScene
{
	+ cullAABB
	+ cullOBB : def get AABB from OBB -> cullAABB
	+ cullSphere : def get AABB from sphere -> cullAABB
	+ cullSpotLight : def get sphere from radius -> cullSphere
	- cullData
}

class s3dScene
{
	+ addStaticMeshInstance()
	+ removeStaticMeshInstance( meshinst )
	+ addLight()
	+ removeLight( light )
	
	- camera
	- cullScene
}

class s3dRenderer
{
	+ update( dt )
	+ render()
	+ resize( w, h )
	+ onDeviceLost()
	+ onDeviceReset()
	
	+ createScene()
	+ destroyScene( scene )
	+ getShader( name )
	+ createTexture( type )
	+ destroyTexture( tex )
	+ createMesh()
	+ destroyMesh( mesh )
	
	+ preloadShaders( list )
	+ preloadMaterials( list )
	+ unloadShaders( list )
	+ unloadMaterials( list )
	
	- currentScene
	- store
}

