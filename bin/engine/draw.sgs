
function get_camera_2d_mtx( x, y, size, aspect, angle )
{
	size = 1.0/size;
	x *= size/aspect;
	y *= size;
	return
	[
		ss_using_d3d_signed * size/aspect, 0, 0, -x,
		0, -size, 0, y,
		0, 0, size, 0.5*size,
		0, 0, 0, 1,
	];
}
function set_camera_2d( x, y, size, aspect, angle )
{
	set_camera( get_camera_2d_mtx( x, y, size, aspect, angle ) );
}

function get_camera_ui_mtx( x1, x2, y1, y2 )
{
	w = x2 - x1;
	h = y2 - y1;
	return
	[
		2.0/w, 0, 0, -1-x1/w,
		0, -2.0/h, 0, 1+y1/w,
		0, 0, 1, 0,
		0, 0, 0, 1,
	];
}
function set_camera_ui( x1, x2, y1, y2 )
{
	set_camera( get_camera_ui_mtx( x1, x2, y1, y2 ) );
}

function multiply_point_matrix( mtx, x, y )
{
	return vec2d( mtx[0]*x + mtx[1]*y + mtx[3], mtx[4]*x + mtx[5]*y + mtx[7] );
}


function vec3_normalized( v )
{
	len = sqrt( v[0]*v[0] + v[1]*v[1] + v[2]*v[2] );
	if( !len )
		return v;
	return [ v[0]/len, v[1]/len, v[2]/len ];
}
function vec3_dot( a, b ){ return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]; }
function vec3_cross( a, b )
{
	return
	[
		a[1] * b[2] - a[2] * b[1],
		a[2] * b[0] - a[0] * b[2],
		a[0] * b[1] - a[1] * b[0],
	];
}
function vec3_sub( a, b ){ return [ a[0]-b[0], a[1]-b[1], a[2]-b[2] ]; }

function mtx_transpose( m )
{
	return
	[
		m[0], m[4], m[8], m[12],
		m[1], m[5], m[9], m[13],
		m[2], m[6], m[10], m[14],
		m[3], m[7], m[11], m[15],
	];
}

function get_camera_lookat( pos, dir, up )
{
	zaxis = vec3_normalized( dir );
	xaxis = vec3_normalized( vec3_cross( up, zaxis ) );
	yaxis = vec3_cross( zaxis, xaxis );
	
	return
	[
		xaxis[0], yaxis[0], zaxis[0], 0,
		xaxis[1], yaxis[1], zaxis[1], 0,
		xaxis[2], yaxis[2], zaxis[2], 0,
		-vec3_dot( xaxis, pos ),
		-vec3_dot( yaxis, pos ),
		-vec3_dot( zaxis, pos ),
		1,
	];
}
function get_camera_perspective( angle, aspect, znear, zfar )
{
	yscale = 1 / tan( angle / 2 );
	xscale = yscale / aspect;
	return
	[
		ss_using_d3d_signed * -xscale, 0, 0, 0,
		0, yscale, 0, 0,
		0, 0, zfar/(zfar-znear), -znear*zfar/(zfar-znear),
		0, 0, 1, 0,
	];
}
function set_camera_3d( pos, dir, up, angle, aspect, znear, zfar )
{
	set_camera
	(
		mtx_transpose( get_camera_lookat( pos, dir, up ) )
		,get_camera_perspective( angle, aspect, znear, zfar )
	);
}
function get_camera_3d( pos, dir, up, angle, aspect, znear, zfar )
{
	return
	[
		get_camera_lookat( pos, dir, up )
		,get_camera_perspective( angle, aspect, znear, zfar )
	];
}

function draw_fitted( tex, left, right, top, bottom, placement )
{
	xq = 1;
	yq = 1;
	if( placement & DT_LEFT ) xq = 0;
	if( placement & DT_RIGHT ) xq = 2;
	if( placement & DT_TOP ) yq = 0;
	if( placement & DT_BOTTOM ) yq = 2;

	iw = tex.width;
	ih = tex.height;
	rw = right - left;
	rh = bottom - top;

	if( iw > rw || ih > rh )
	{
		ia = iw / ih;
		ra = rw / rh;
		if( ia > ra ) // width-limited
		{
			ih *= rw / iw;
			iw = rw;
		}
		else // height-limited
		{
			iw *= rh / ih;
			ih = rh;
		}
	}
	draw({
		preset = "tile", texture = tex,
		position = [ ( rw - iw ) / 2 * xq + left, ( rh - ih ) / 2 * yq + top ],
		scale = [ iw, ih ],
	});
}

function draw_button( tex, left, right, top, bottom, off, texoff )
{
	off ||= 8;
	texoff ||= off;

	tox = texoff / tex.width;
	toy = texoff / tex.height;
	x1 = left + off;
	x2 = right - off;
	y1 = top + off;
	y2 = bottom - off;

	V =
	[
		[left, top], [x1, top], [x1, y1], [left, y1],
		[x1, top], [x2, top], [x2, y1], [x1, y1],
		[x2, top], [right, top], [right, y1], [x2, y1],

		[left, y1], [x1, y1], [x1, y2], [left, y2],
		[x1, y1], [x2, y1], [x2, y2], [x1, y2],
		[x2, y1], [right, y1], [right, y2], [x2, y2],

		[left, y2], [x1, y2], [x1, bottom], [left, bottom],
		[x1, y2], [x2, y2], [x2, bottom], [x1, bottom],
		[x2, y2], [right, y2], [right, bottom], [x2, bottom],
	];

	T =
	[
		[0, 0], [tox, 0], [tox, toy], [0, toy],
		[tox, 0], [1-tox, 0], [1-tox, toy], [tox, toy],
		[1-tox, 0], [1, 0], [1, toy], [1-tox, toy],

		[0, toy], [tox, toy], [tox, 1-toy], [0, 1-toy],
		[tox, toy], [1-tox, toy], [1-tox, 1-toy], [tox, 1-toy],
		[1-tox, toy], [1, toy], [1, 1-toy], [1-tox, 1-toy],

		[0, 1-toy], [tox, 1-toy], [tox, 1], [0, 1],
		[tox, 1-toy], [1-tox, 1-toy], [1-tox, 1], [tox, 1],
		[1-tox, 1-toy], [1, 1-toy], [1, 1], [1-tox, 1],
	];

	draw({ texture = tex, mode = PT_QUADS, vertices = V, vtexcoords = T, position=[0,0] });
}

