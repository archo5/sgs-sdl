

function drawfunc_init()
{
	global g_RB = create_renderbuf();
	global g_VD_P2CC4 = make_vertex_format( "pf2cc4" );
	global g_VD_P2T2 = make_vertex_format( "pf2tf2" );
	global g_VD_P2T2CC4 = make_vertex_format( "pf2tf2cc4" );
}

function draw_color_rect( x1, y1, x2, y2, r, g, b, a )
{
	if( ss_using_d3d ){ tmp = r; r = b; b = tmp; }
	g_RB.begin()
		.f( x1, y1 ).cf2b( r, g, b, a )
		.f( x2, y1 ).cf2b( r, g, b, a )
		.f( x2, y2 ).cf2b( r, g, b, a )
		.f( x1, y2 ).cf2b( r, g, b, a )
		.draw( null, g_VD_P2CC4, 0, 4, PT_TRIANGLE_FAN );
}
function draw_color_rect_wh( x, y, w, h, r, g, b, a ){ draw_color_rect( x, y, x+w, y+h, r, g, b, a ); }

function draw_tex_rect( x1, y1, x2, y2, tex )
{
	g_RB.begin().f(
		x1, y1, 0, 0,
		x2, y1, 1, 0,
		x2, y2, 1, 1,
		x1, y2, 0, 1
	).draw( tex, g_VD_P2T2, 0, 4, PT_TRIANGLE_FAN );
}
function draw_tex_rect_wh( x, y, w, h, tex ){ draw_tex_rect( x, y, x+w, y+h, tex ); }
function draw_tex_box_wh( x, y, w, h, tex ){ w /= 2; h /= 2; draw_tex_rect( x-w, y-h, x+w, y+h, tex ); }
function draw_tex_box_wh_rotated( x, y, w, h, angle, tex )
{
	w *= 0.5;
	h *= 0.5;
	
	c = cos( angle );
	s = sin( angle );
	
	ext1x = ( c - s ) * w;
	ext1y = ( c + s ) * h;
	ext2x = ( -c -s ) * w;
	ext2y = ( c - s ) * h;
	
	g_RB.begin().f(
		x - ext1x, y - ext1y, 0, 0, // pos - ext1
		x - ext2x, y - ext2y, 1, 0, // pos - ext2
		x + ext1x, y + ext1y, 1, 1, // pos + ext1
		x + ext2x, y + ext2y, 0, 1 // pos + ext2
	).draw( tex, g_VD_P2T2, 0, 4, PT_TRIANGLE_FAN );
}

function draw_tex_color_rect( x1, y1, x2, y2, tex, r, g, b, a )
{
	if( ss_using_d3d ){ tmp = r; r = b; b = tmp; }
	g_RB.begin()
		.f( x1, y1, 0, 0 ).cf2b( r, g, b, a )
		.f( x2, y1, 1, 0 ).cf2b( r, g, b, a )
		.f( x2, y2, 1, 1 ).cf2b( r, g, b, a )
		.f( x1, y2, 0, 1 ).cf2b( r, g, b, a )
		.draw( tex, g_VD_P2T2CC4, 0, 4, PT_TRIANGLE_FAN );
}
function draw_tex_color_rect_wh( x, y, w, h, tex, r, g, b, a ){ draw_tex_color_rect( x, y, x+w, y+h, tex, r, g, b, a ); }
function draw_tex_color_box_wh( x, y, w, h, tex, r, g, b, a ){ w /= 2; h /= 2; draw_tex_color_rect( x-w, y-h, x+w, y+h, tex, r, g, b, a ); }
function draw_tex_color_box_wh_rotated( x, y, w, h, angle, tex, r, g, b, a )
{
	w *= 0.5;
	h *= 0.5;
	
	c = cos( angle );
	s = sin( angle );
	
	ext1x = ( c - s ) * w;
	ext1y = ( c + s ) * h;
	ext2x = ( -c -s ) * w;
	ext2y = ( c - s ) * h;
	
	if( ss_using_d3d ){ tmp = r; r = b; b = tmp; }
	
	g_RB.begin()
		.f( x - ext1x, y - ext1y, 0, 1 ).cf2b( r, g, b, a ) // pos - ext1
		.f( x - ext2x, y - ext2y, 1, 1 ).cf2b( r, g, b, a ) // pos - ext2
		.f( x + ext1x, y + ext1y, 1, 0 ).cf2b( r, g, b, a ) // pos + ext1
		.f( x + ext2x, y + ext2y, 0, 0 ).cf2b( r, g, b, a ) // pos + ext2
		.draw( tex, g_VD_P2T2CC4, 0, 4, PT_TRIANGLE_FAN );
}

function draw_color_poly_outlined( vertices, r, g, b, a, or, og, ob, oa )
{
	if( vertices.size < 3 )
		return;
	
	if( ss_using_d3d ){ tmp = r; r = b; b = tmp; }
	if( ss_using_d3d ){ tmp = or; or = ob; ob = tmp; }
	
	g_RB.begin();
	foreach( v : vertices )
		g_RB.f( v.x, v.y ).cf2b( r, g, b, a );
	g_RB.draw( null, g_VD_P2CC4, 0, vertices.size, PT_TRIANGLE_FAN );
	
	g_RB.begin();
	foreach( v : vertices )
		g_RB.f( v.x, v.y ).cf2b( or, og, ob, oa );
	v = vertices.first;
	g_RB.f( v.x, v.y ).cf2b( or, og, ob, oa );
	g_RB.draw( null, g_VD_P2CC4, 0, vertices.size + 1, PT_LINE_STRIP );
}

function draw_color_line( x1, y1, x2, y2, r, g, b, a )
{
	if( ss_using_d3d ){ tmp = r; r = b; b = tmp; }
	g_RB.begin()
		.f( x1, y1 ).cf2b( r, g, b, a )
		.f( x2, y2 ).cf2b( r, g, b, a )
		.draw( null, g_VD_P2CC4, 0, 2, PT_LINES );
}


function get_camera_2d_mtx( x, y, size, aspect, angle )
{
	size = 1.0/size;
	x *= size/aspect;
	y *= size;
	return
	[
		size/aspect, 0, 0, -x,
		0, -size, 0, y,
		0, 0, size, 0.5*size,
		0, 0, 0, 1,
	];
}
function set_camera_2d( x, y, size, aspect, angle )
{
	set_camera( get_camera_2d_mtx( x, y, size, aspect, angle ) );
}

function get_camera_ui_mtx( x1, x2, y1, y2 )
{
	w = x2 - x1;
	h = y2 - y1;
	return
	[
		2.0/w, 0, 0, -1-x1/w,
		0, -2.0/h, 0, 1+y1/w,
		0, 0, 1, 0,
		0, 0, 0, 1,
	];
}
function set_camera_ui( x1, x2, y1, y2 )
{
	set_camera( get_camera_ui_mtx( x1, x2, y1, y2 ) );
}

function multiply_point_matrix( mtx, x, y )
{
	return vec2( mtx[0]*x + mtx[1]*y + mtx[3], mtx[4]*x + mtx[5]*y + mtx[7] );
}


function mtx_transpose( m )
{
	return
	[
		m[0], m[4], m[8], m[12],
		m[1], m[5], m[9], m[13],
		m[2], m[6], m[10], m[14],
		m[3], m[7], m[11], m[15],
	];
}

function get_camera_lookat( pos, dir, up )
{
	zaxis = dir.normalized;
	xaxis = vec3_cross( up, zaxis ).normalized;
	yaxis = vec3_cross( zaxis, xaxis );
	
	return
	[
		xaxis[0], yaxis[0], zaxis[0], 0,
		xaxis[1], yaxis[1], zaxis[1], 0,
		xaxis[2], yaxis[2], zaxis[2], 0,
		-vec3_dot( xaxis, pos ),
		-vec3_dot( yaxis, pos ),
		-vec3_dot( zaxis, pos ),
		1,
	];
}
function get_camera_perspective( angle, aspect, znear, zfar )
{
	yscale = 1 / tan( angle / 2 );
	xscale = yscale / aspect;
	return
	[
		-xscale, 0, 0, 0,
		0, yscale, 0, 0,
		0, 0, zfar/(zfar-znear), -znear*zfar/(zfar-znear),
		0, 0, 1, 0,
	];
}
function set_camera_3d( pos, dir, up, angle, aspect, znear, zfar )
{
	set_camera
	(
		mtx_transpose( get_camera_lookat( pos, dir, up ) )
		,get_camera_perspective( angle, aspect, znear, zfar )
	);
}
function get_camera_3d( pos, dir, up, angle, aspect, znear, zfar )
{
	return
	[
		get_camera_lookat( pos, dir, up )
		,get_camera_perspective( angle, aspect, znear, zfar )
	];
}

function draw_fitted( tex, left, right, top, bottom, placement )
{
	xq = 1;
	yq = 1;
	if( placement & DT_LEFT ) xq = 0;
	if( placement & DT_RIGHT ) xq = 2;
	if( placement & DT_TOP ) yq = 0;
	if( placement & DT_BOTTOM ) yq = 2;

	iw = tex.width;
	ih = tex.height;
	rw = right - left;
	rh = bottom - top;

	if( iw > rw || ih > rh )
	{
		ia = iw / ih;
		ra = rw / rh;
		if( ia > ra ) // width-limited
		{
			ih *= rw / iw;
			iw = rw;
		}
		else // height-limited
		{
			iw *= rh / ih;
			ih = rh;
		}
	}
	draw({
		preset = "tile", texture = tex,
		position = [ ( rw - iw ) / 2 * xq + left, ( rh - ih ) / 2 * yq + top ],
		scale = [ iw, ih ],
	});
}

function draw_button( tex, left, right, top, bottom, off, texoff )
{
	off ||= 8;
	texoff ||= off;

	tox = texoff / tex.width;
	toy = texoff / tex.height;
	x1 = left + off;
	x2 = right - off;
	y1 = top + off;
	y2 = bottom - off;

	V =
	[
		[left, top], [x1, top], [x1, y1], [left, y1],
		[x1, top], [x2, top], [x2, y1], [x1, y1],
		[x2, top], [right, top], [right, y1], [x2, y1],

		[left, y1], [x1, y1], [x1, y2], [left, y2],
		[x1, y1], [x2, y1], [x2, y2], [x1, y2],
		[x2, y1], [right, y1], [right, y2], [x2, y2],

		[left, y2], [x1, y2], [x1, bottom], [left, bottom],
		[x1, y2], [x2, y2], [x2, bottom], [x1, bottom],
		[x2, y2], [right, y2], [right, bottom], [x2, bottom],
	];

	T =
	[
		[0, 0], [tox, 0], [tox, toy], [0, toy],
		[tox, 0], [1-tox, 0], [1-tox, toy], [tox, toy],
		[1-tox, 0], [1, 0], [1, toy], [1-tox, toy],

		[0, toy], [tox, toy], [tox, 1-toy], [0, 1-toy],
		[tox, toy], [1-tox, toy], [1-tox, 1-toy], [tox, 1-toy],
		[1-tox, toy], [1, toy], [1, 1-toy], [1-tox, 1-toy],

		[0, 1-toy], [tox, 1-toy], [tox, 1], [0, 1],
		[tox, 1-toy], [1-tox, 1-toy], [1-tox, 1], [tox, 1],
		[1-tox, 1-toy], [1, 1-toy], [1, 1], [1-tox, 1],
	];

	draw({ texture = tex, mode = PT_QUADS, vertices = V, vtexcoords = T, position=[0,0] });
}

