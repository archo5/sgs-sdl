
include_file( "engine/font.sgs" );
include_file( "engine/draw.sgs" );


global _efn = function(){};


global UIControlDefaults =
{
	/* references */
	parent = null,
	frame = null,
	children = null,
	
	/* states */
	clicked = false,
	clicked3 = false,
	mouseon = false,
};

global UIControl =
{
	/* processing */
	on_draw = null,
};

/* DEFAULT events */
UIControl.onclick = _efn;
UIControl.onmousemove = _efn;
UIControl.onattach = _efn;
function UIControl.onhittest( x, y )
{
	return this.x <= x && this.x + this.w >= x
		&& this.y <= y && this.y + this.h >= y;
}
function UIControl.onenter(){ this.mouseon = true; }
function UIControl.onleave(){ this.mouseon = false; }
function UIControl.onmousedown( x, y, bid )
{
	if( this.mouseon && bid == 1 ) this.clicked = true;
	if( this.mouseon && bid == 3 ) this.clicked3 = true;
}
function UIControl.onmouseup( x, y, bid )
{
	if( this.clicked && this.mouseon && bid == 1 ){ this.onclick( x, y, bid ); this.clicked = false; }
	if( this.clicked3 && this.mouseon && bid == 3 ){ this.onclick( x, y, bid ); this.clicked3 = false; }
}
function UIControl.onresize( w, h ){ foreach( c : this.children ) c.onresize( w, h ); }
function UIControl.globalmousedown( x, y, bid ){ foreach( c : this.children ) c.globalmousedown( x, y, bid ); }
function UIControl.globalmouseup( x, y, bid ){ foreach( c : this.children ) c.globalmouseup( x, y, bid ); }

/* PROCESSING */
function UIControl.hasProperty( name )
{
	orig = sys_replevel( SGS_ERROR + 1 );
	ret = this[ name ] !== null;
	sys_replevel( orig );
	return ret;
}
function UIControl.get_ctrl_at( x, y )
{
	for( var i = this.children.size - 1; i >= 0; --i )
	{
		var sub = this.children[ i ].get_ctrl_at( x, y );
		if( sub !== null )
			return sub;
	}
	if( this.onhittest( x, y ) )
		return this;
	return null;
}
function UIControl.addChild( ch )
{
	ch.parent = this;
	ch.frame = this.frame;
	this.children.push( ch );
	ch.onattach();
	return ch;
}

function UIControl.create( override )
{
	var data = clone( UIControlDefaults );
	data.children = []; // this one doesn't get cloned otherwise
	data.font = create_font( "verdana.ttf", 12 );
	foreach( k, v : override )
		data[ k ] = v;
	return class( data, UIControl );
}


function ui_default_paint_button()
{
	mon = this.mouseon; if( this.clicked ) mon = 0;
	tex = this.textures[ mon + this.clicked * 2 ];
	draw_button( tex, this.x, this.x + this.w, this.y, this.y + this.h );

	draw_text_rect( this.name, this.font, [0.9,1], DT_CENTER | DT_VCENTER,
		this.x + 8, this.x + this.w - 8, this.y + 9, this.y + this.h - 7 );
	draw_text_rect( this.name, this.font, [0.1,1], DT_CENTER | DT_VCENTER,
		this.x + 8, this.x + this.w - 8, this.y + 8, this.y + this.h - 8 );
}

function UIControl.createButton( name, x, y, w, h, onclick )
{
	return UIControl.create
	({
		name = name,
		type = "button",
		x = x,
		y = y,
		w = w,
		h = h,
		onclick = onclick,
		on_draw = ui_default_paint_button,
		textures =
		[
			create_texture( "engine/img/buttonN.png" ),
			create_texture( "engine/img/buttonH.png" ),
			create_texture( "engine/img/buttonC.png" ),
		],
	});
}


function UICreateMenuItem( name, onclick, icon )
{
	return
	{
		ch = [],
		icon = icon,
		name = name,
		onclick = onclick,
		visible = true,
		mouseon = false,
		clicked = false,
	};
}


function ui_default_paint_dropmenu()
{
	if( !this.visible )
		return;

	var _fo = 3;
	var _sepscl = [ this.w, 1 ];

	draw_button( this.textures[2], this.x - _fo, this.x + this.w + _fo,
		this.y - _fo, this.y + this.h + _fo, 4, 4 );

	foreach( iid, item : this.items )
	{
		if( !item.visible )
			continue;
		x1 = this.x;
		x2 = x1 + this.w;
		y1 = this.y + item.y;
		y2 = y1 + item.height;
		if( item.name )
		{
			if( item.mouseon )
			{
				tex = this.textures[ item.clicked ];
				draw_button( tex, x1, x2, y1, y2, 4, 4 );
			}
			draw_text_rect( item.name, this.font, [0.1,1], DT_LEFT | DT_VCENTER, x1 + 32, x2, y1, y2 - 4 );
		}
		else
		{
			draw({ preset = "tile", position = [ x1, y1 + 3 ], scale = _sepscl, color = [ 0.6, 0.6, 0.6 ] });
			draw({ preset = "tile", position = [ x1, y1 + 4 ], scale = _sepscl, color = [ 0.8, 0.8, 0.8 ] });
		}
	}
}

function UIControl.createDropMenu()
{
	var UIDropMenu =
	{
		type = "dropmenu",
		x = 0,
		y = 0,
		w = 0,
		h = 0,
		on_draw = ui_default_paint_dropmenu,

		textures =
		[
			create_texture( "engine/img/menuitemH.png" ),
			create_texture( "engine/img/menuitemC.png" ),
			create_texture( "engine/img/frame.png" ),
		],

		items = [],
		open_item = -1,
		visible = false,
	};

	function UIDropMenu.onhittest( x, y )
	{
		if( !this.visible )
			return false;
		return UIControl.onhittest.thiscall( this, x, y );
	}
	function UIDropMenu.globalmousedown( x, y )
	{
		if( this.visible )
		{
			x1 = this.x;
			y1 = this.y;
			x2 = x1 + this.w;
			y2 = y1 + this.h;
			if( x < x1 || x > x2 || y < y1 || y > y2 )
				this.visible = false;
		}
	}
	function UIDropMenu.onmousemove( x, y )
	{
		foreach( iid, item : this.items )
		{
			y1 = this.y + item.y;
			y2 = y1 + item.height;
			item.mouseon = y >= y1 && y < y2;
			if( item.mouseon && this.open_item >= 0 )
				this.open_item = iid;
		}
	}
	function UIDropMenu.onmousedown( x, y, bid )
	{
		if( bid != 1 )
			return;
		foreach( iid, item : this.items )
		{
			if( item.mouseon )
			{
				item.clicked = true;
				if( this.open_item == iid )
					this.open_item = -1;
				else
					this.open_item = iid;
			}
		}
	}
	function UIDropMenu.onmouseup()
	{
		foreach( item : this.items )
		{
			if( item.clicked )
			{
				if( item.onclick )
					item.onclick();
				if( this.parent.hasProperty( "setOpenItem" ) )
					this.parent.setOpenItem( -1 );
				item.clicked = false;
				this.close();
			}
		}
	}

	function UIDropMenu.open( x, y )
	{
		this.x = x;
		this.y = y;
		this.w = 200;
		this.h = 4;

		foreach( item : this.items )
		{
			item.clicked = false;
			item.mouseon = false;
			item.y = this.h - 2;
			item.height = 0;
			if( item.visible )
			{
				if( item.name !== null )
					item.height = this.font.size + 8;
				else
					item.height = 8;
				this.h += item.height;
			}
		}

		// TODO pull it out of corners and sides
		if( this.x + this.w > this.frame.x + this.frame.w )
			this.x = this.frame.x + this.frame.w - this.w;
		if( this.y + this.h > this.frame.y + this.frame.h )
			this.y = this.frame.y + this.frame.h - this.h;

		this.visible = true;
	}
	function UIDropMenu.close()
	{
		this.visible = false;
		this.frame.moved( this );
	}

	return UIControl.create( UIDropMenu );
}



function ui_default_paint_menu()
{
	var _fo = 3;
	var _scl = [ 200, 1 ];

	draw_button( this.textures[2], this.x - _fo, this.x + this.w + _fo,
		this.y - _fo, this.y + this.h + _fo, 4, 4 );
	
	foreach( iid, item : this.items )
	{
		if( item.visible && item.inview )
		{
			x = this.x + item.x;
			y = this.y + 2;
			w = item.width;
			h = item.height;
			tex = this.textures[ this.open_item == iid ];
			if( item.mouseon || iid == this.open_item )
				draw_button( tex, x, x + w, y, y + h, 4, 4 );
			draw_text_rect( item.name, this.font, [0.1,1], DT_CENTER | DT_VCENTER, x, x + w, y - 2, y + h - 2 );
		}
	}

	foreach( ch : this.children )
		if( ch.on_draw )
			ch.on_draw();
}

function UIControl.createMenu()
{
	var UIMenu =
	{
		type = "menu",
		x = 0,
		y = 0,
		w = 9999,
		h = 24,
		on_draw = ui_default_paint_menu,

		textures =
		[
			create_texture( "engine/img/menuitemH.png" ),
			create_texture( "engine/img/menuitemC.png" ),
			create_texture( "engine/img/frame.png" ),
		],

		items = [],
		open_item = -1,
	};

	function UIMenu.onattach()
	{
		this.w = this.parent.w;
	}

	function UIMenu.onresize( w, h )
	{
		this.w = this.parent.w;
		this._super.onresize.thiscall( this, w, h );
	}

	function UIMenu.setOpenItem( iid )
	{
		// close the previous one
		if( this.open_item != -1 &&
			type_get( this.items[ this.open_item ].onclick ) == TYPE_OBJECT )
			this.items[ this.open_item ].onclick.close();

		this.open_item = iid;

		// open the new one
		if( iid != -1 &&
			type_get( this.items[ iid ].onclick ) == TYPE_OBJECT )
			this.items[ iid ].onclick.open( this.items[ iid ].x, this.y + 24 );
	}

	function UIMenu.onmousemove( x, y )
	{
		foreach( iid, item : this.items )
		{
			x1 = item.x + this.x;
			x2 = x1 + item.width;
			item.mouseon = x >= x1 && x <= x2;
			if( item.mouseon && this.open_item >= 0 )
				this.setOpenItem( iid );
		}
	}
	function UIMenu.onmousedown( x, y, bid )
	{
		if( bid != 1 )
			return;
		foreach( iid, item : this.items )
		{
			if( item.mouseon )
			{
				item.clicked = true;
				if( this.open_item == iid )
					this.setOpenItem( -1 );
				else
					this.setOpenItem( iid );
			}
		}
	}
	function UIMenu.onmouseup()
	{
		foreach( item : this.items )
		{
			if( item.clicked )
			{
				if( item.onclick )
					item.onclick.thiscall( this );
				item.clicked = false;
			}
		}
	}
	function UIMenu.globalmousedown( x, y )
	{
		// button hits
		btnhit = false;
		vhit = y >= this.y && y <= this.y + this.h;
		foreach( iid, item : this.items )
		{
			btnhit ||= item.mouseon && vhit;
		}

		// child hits
		cat = this.get_ctrl_at( x, y );
		if( cat != null && cat != this )
			btnhit = true;

		// if none, close menu
		if( !btnhit )
			this.setOpenItem( -1 );
	}

	function UIMenu.onleave()
	{
		foreach( item : this.items )
			item.mouseon = false;
	}

	function UIMenu.recalcLayout()
	{
		x = 0;
		xe = this.x + this.w;

		foreach( item : this.items )
		{
			x += 2;
			item.x = x;
			item.width = get_text_length( item.name, this.font ) + 24;
			item.height = this.font.size + 8;
			x += item.width;
			item.inview = x <= this.w;
		}
	}

	function UIMenu.addItem( item )
	{
		this.items.push( item );
		if( type_get( item.onclick ) == TYPE_OBJECT )
			this.addChild( item.onclick );
		return item;
	}

	return UIControl.create( UIMenu );
}


global UIFrame =
{
	name = "__frame__",
	type = "frame",
	x = 0,
	y = 0,
	w = 9999,
	h = 9999,
	
	curhover = null,
	curclick = null,
	lmpos_x = null,
	lmpos_y = null,
};

function UIFrame.addChild( ch )
{
	UIControl.addChild.thiscall( this, ch );
	ch.frame = this;
	return ch;
}

function UIFrame.moved( me )
{
	if( this.curhover == me )
	{
		this.curhover = null;
	}
}

function UIFrame.event( e )
{
	if( e.type == SDL_VIDEORESIZE )
	{
		this.w = e.w;
		this.h = e.h;
		this.onresize( e.w, e.h );
	}
	if( e.type == SDL_MOUSEMOTION )
	{
		this.lmpos_x = e.x;
		this.lmpos_y = e.y;
		var ctrl = this.get_ctrl_at( e.x, e.y );
		if( ctrl !== this.curhover )
		{
			if( this.curhover !== null )
				this.curhover.onleave();
			this.curhover = ctrl;
			if( ctrl !== null )
				ctrl.onenter();
		}
		if( ctrl !== null )
			ctrl.onmousemove( e.x, e.y );
	}
	if( e.type == SDL_MOUSEBUTTONDOWN || e.type == SDL_MOUSEBUTTONUP )
	{
		var ctrl = this.get_ctrl_at( e.x, e.y );
		if( e.type == SDL_MOUSEBUTTONDOWN )
		{
			this.globalmousedown( e.x, e.y, e.button );
			if( ctrl !== null )
				ctrl.onmousedown( e.x, e.y, e.button );
			this.curclick = ctrl;
		}
		else
		{
			this.globalmouseup( e.x, e.y, e.button );
			if( ctrl !== null )
				ctrl.onmouseup( e.x, e.y, e.button );
			if( this.curclick !== null && ctrl !== this.curclick )
				this.curclick.onmouseup( e.x, e.y, e.button );
			this.curclick = null;
		}
	}
}

function UIFrame.draw()
{
	set_camera_ui( this.x, this.x+this.w, this.y, this.y+this.h );
	foreach( ch : this.children )
	{
		if( ch.on_draw )
			ch.on_draw();
	}
}

function UIFrame.create( w, h )
{
	var f = clone( UIFrame );
	f.w = w;
	f.h = h;
	return UIControl.create( f );
}
