
global _efn = function(){};


global UIControlDefaults =
{
	/* references */
	parent = null,
	frame = null,
	children = null,
	
	/* states */
	clicked = false,
	clicked3 = false,
	mouseon = false,
};

global UIControl = {};

/* DEFAULT events */
UIControl.on_draw = _efn;
UIControl.onclick = _efn;
UIControl.onmousemove = _efn;
function UIControl.onattach()
{
	this.frame = this.parent.frame;
	foreach( c : this.children )
		c.onattach();
}
function UIControl.onhittest( x, y )
{
	return this.ax <= x && this.ax + this.w >= x
		&& this.ay <= y && this.ay + this.h >= y;
}
function UIControl.onenter(){ this.mouseon = true; }
function UIControl.onleave(){ this.mouseon = false; }
function UIControl.onmousedown( x, y, bid )
{
	if( this.mouseon && bid == 1 ) this.clicked = true;
	if( this.mouseon && bid == 3 ) this.clicked3 = true;
}
function UIControl.onmouseup( x, y, bid )
{
	if( this.clicked && bid == 1 )
	{
		if( this.mouseon && this.onclick != null )
			this.onclick( x, y, bid );
		this.clicked = false;
	}
	if( this.clicked3 && bid == 3 )
	{
		if( this.mouseon && this.onclick != null )
			this.onclick( x, y, bid );
		this.clicked3 = false;
	}
}
function UIControl.onresize( w, h ){ foreach( c : this.children ) c.onresize( w, h ); }
function UIControl.onlayout()
{
	if( this.parent != null )
	{
		this.ax = this.x + this.parent.ax;
		this.ay = this.y + this.parent.ay;
	}
	foreach( c : this.children )
		c.onlayout();
}
function UIControl.globalmousedown( x, y, bid ){ foreach( c : this.children ) c.globalmousedown( x, y, bid ); }
function UIControl.globalmouseup( x, y, bid ){ foreach( c : this.children ) c.globalmouseup( x, y, bid ); }
function UIControl.globalmousemove( x, y, xr, yr )
{ foreach( c : this.children ) c.globalmousemove( x, y, xr, yr ); }

/* PROCESSING */
function UIControl.hasProperty( name )
{
	orig = sys_replevel( SGS_ERROR + 1 );
	ret = this[ name ] !== null;
	sys_replevel( orig );
	return ret;
}
function UIControl.get_ctrl_at( x, y )
{
	for( var i = this.children.size - 1; i >= 0; --i )
	{
		var sub = this.children[ i ].get_ctrl_at( x, y );
		if( sub !== null )
			return sub;
	}
	if( this.onhittest( x, y ) )
		return this;
	return null;
}
function UIControl.addChild( ch )
{
	ch.parent = this;
	this.children.push( ch );
	ch.onattach();
	ch.onlayout();
	return ch;
}
function UIControl.removeChild( ch )
{
	foreach( i, c : this.children )
	{
		if( ch == c )
		{
			this.children.erase( i );
			break;
		}
	}
}
function UIControl.remove()
{
	if( this.parent != null )
		this.parent.removeChild( this );
}

function UIControl.create( override )
{
	var data = clone( UIControlDefaults );
	data.children = []; // this one doesn't get cloned otherwise
	data.font = SS_CreateFont( "verdana.ttf", 12 );
	foreach( k, v : override )
		data[ k ] = v;
	return class( data, UIControl );
}


/*
*
*   S T A T I C
*
*/

function UIControl.createText( text, x, y, w, h, placement, color )
{
	color ||= [ 0.1, 1 ];
	placement ||= DT_LEFT | DT_TOP;

	var UIText =
	{
		name = text,
		type = "text",
		x = x,
		y = y,
		w = w,
		h = h,
		color = color,
		placement = placement,
	};

	function UIText.on_draw()
	{
		draw_text_rect( this.name, this.font, this.color, this.placement,
			this.ax, this.ax + this.w, this.ay, this.ay + this.h );
	}

	return UIControl.create( UIText );
}


/*
*
*   B U T T O N S
*
*/

function ui_default_paint_button()
{
	mon = this.mouseon; if( this.clicked ) mon = 0;
	tex = this.textures[ mon + this.clicked * 2 ];
	SS_DrawButton( tex, this.ax - 4, this.ax + this.w + 4, this.ay - 4, this.ay + this.h + 4 );

	if( this.icon != null )
	{
		draw_fitted( this.icon, this.ax + 2, this.ax + this.w - 2, this.ay + 2, this.ay + this.h - 2 );
	}
	else
	{
		draw_text_rect( this.name, this.font, [0.9,1], DT_CENTER | DT_VCENTER,
			this.ax + 4, this.ax + this.w - 4, this.ay + 5, this.ay + this.h - 3 );
		draw_text_rect( this.name, this.font, [0.1,1], DT_CENTER | DT_VCENTER,
			this.ax + 4, this.ax + this.w - 4, this.ay + 4, this.ay + this.h - 4 );
	}
}

function UIControl.createButton( name, x, y, w, h, onclick )
{
	return UIControl.create
	({
		name = name,
		type = "button",
		x = x,
		y = y,
		w = w,
		h = h,
		icon = null,
		onclick = onclick,
		on_draw = ui_default_paint_button,
		textures =
		[
			SS_CreateTexture( "engine/img/buttonN.png" ),
			SS_CreateTexture( "engine/img/buttonH.png" ),
			SS_CreateTexture( "engine/img/buttonC.png" ),
		],
	});
}


function ui_default_paint_radiobtn()
{
	clk = this.clicked || ( isset( this.frame.formdata, this.key ) &&
		this.frame.formdata[ this.key ] == this.value );
	mon = this.mouseon; if( clk ) mon = 0;
	tex = this.textures[ mon + clk * 2 ];
	SS_DrawButton( tex, this.ax - 4, this.ax + this.w + 4, this.ay - 4, this.ay + this.h + 4 );

	draw_text_rect( this.name, this.font, [0.9,1], DT_CENTER | DT_VCENTER,
		this.ax + 4, this.ax + this.w - 4, this.ay + 5, this.ay + this.h - 3 );
	draw_text_rect( this.name, this.font, [0.1,1], DT_CENTER | DT_VCENTER,
		this.ax + 4, this.ax + this.w - 4, this.ay + 4, this.ay + this.h - 4 );
}

function UIControl.createRadioButton( name, key, value, x, y, w, h, onchange )
{
	var UIRadioButton =
	{
		name = name,
		type = "radio",
		key = key,
		value = value,
		x = x,
		y = y,
		w = w,
		h = h,
		onchange = onchange,
		on_draw = ui_default_paint_radiobtn,
		textures =
		[
			SS_CreateTexture( "engine/img/buttonN.png" ),
			SS_CreateTexture( "engine/img/buttonH.png" ),
			SS_CreateTexture( "engine/img/buttonC.png" ),
		],
	};

	function UIRadioButton.onclick()
	{
		this.frame.formdata[ this.key ] = this.value;
		if( this.onchange )
			this.onchange();
	}

	return UIControl.create( UIRadioButton );
}



function UIControl.createSwitch( name, key, x, y, w, h, onchange )
{
	var UISwitch =
	{
		name = name,
		type = "switch",
		key = key,
		value = true,
		x = x,
		y = y,
		w = w,
		h = h,
		onchange = onchange,
		on_draw = ui_default_paint_radiobtn,
		textures =
		[
			SS_CreateTexture( "engine/img/buttonN.png" ),
			SS_CreateTexture( "engine/img/buttonH.png" ),
			SS_CreateTexture( "engine/img/buttonC.png" ),
		],
	};

	function UISwitch.onclick()
	{
		this.frame.formdata[ this.key ] =
			!isset( this.frame.formdata, this.key ) ||
			!this.frame.formdata[ this.key ];
		if( this.onchange )
			this.onchange();
	}

	return UIControl.create( UISwitch );
}




function UICreateItem( name, onclick, icon )
{
	return
	{
		ch = [],
		icon = icon,
		name = name,
		onclick = onclick,
		visible = true,
		mouseon = false,
		clicked = false,
	};
}


/*
*
*   D R O P   M E N U
*
*/

function ui_default_paint_dropmenu()
{
	if( !this.visible )
		return;

	var _fo = 3;
	var _sepscl = [ this.w, 1 ];

	SS_DrawButton( this.textures[2], this.x - _fo, this.x + this.w + _fo,
		this.y - _fo, this.y + this.h + _fo, 4, 4 );

	foreach( iid, item : this.items )
	{
		if( !item.visible )
			continue;
		x1 = this.x;
		x2 = x1 + this.w;
		y1 = this.y + item.y;
		y2 = y1 + item.height;
		if( item.name )
		{
			if( item.mouseon && this.mouseon )
			{
				tex = this.textures[ item.clicked ];
				SS_DrawButton( tex, x1, x2, y1, y2, 4, 4 );
			}
			draw_text_rect( item.name, this.font, [0.1,1], DT_LEFT | DT_VCENTER, x1 + 32, x2, y1, y2 - 4 );
			if( item.icon === true )
				draw_text_rect( ">", this.font, [0.1,1], DT_CENTER | DT_VCENTER, x1, x1 + 32, y1, y2 - 4 );
		}
		else
		{
			draw({ preset = "tile", position = [ x1, y1 + 3 ], scale = _sepscl, color = [ 0.6, 0.6, 0.6 ] });
			draw({ preset = "tile", position = [ x1, y1 + 4 ], scale = _sepscl, color = [ 0.8, 0.8, 0.8 ] });
		}
	}
}

function UIControl.createDropMenu()
{
	var UIDropMenu =
	{
		type = "dropmenu",
		x = 0,
		y = 0,
		w = 0,
		h = 0,
		on_draw = ui_default_paint_dropmenu,

		textures =
		[
			SS_CreateTexture( "engine/img/menuitemH.png" ),
			SS_CreateTexture( "engine/img/menuitemC.png" ),
			SS_CreateTexture( "engine/img/frame.png" ),
		],

		items = [],
		open_item = -1,
		visible = false,
	};

	function UIDropMenu.onhittest( x, y )
	{
		if( !this.visible )
			return false;
		return UIControl.onhittest.thiscall( this, x, y );
	}
	function UIDropMenu.globalmousedown( x, y )
	{
		if( this.visible )
		{
			x1 = this.x;
			y1 = this.y;
			x2 = x1 + this.w;
			y2 = y1 + this.h;
			if( x < x1 || x > x2 || y < y1 || y > y2 )
				this.visible = false;
		}
	}
	function UIDropMenu.onmousemove( x, y )
	{
		foreach( iid, item : this.items )
		{
			y1 = this.y + item.y;
			y2 = y1 + item.height;
			item.mouseon = y >= y1 && y < y2;
			if( item.mouseon && this.open_item >= 0 )
				this.open_item = iid;
		}
	}
	function UIDropMenu.onmousedown( x, y, bid )
	{
		if( bid != 1 )
			return;
		foreach( iid, item : this.items )
		{
			if( item.mouseon )
			{
				item.clicked = true;
				if( this.open_item == iid )
					this.open_item = -1;
				else
					this.open_item = iid;
			}
		}
	}
	function UIDropMenu.onmouseup()
	{
		foreach( item : this.items )
		{
			if( item.clicked )
			{
				if( item.onclick )
					item.onclick.thiscall( this, item );
				if( this.parent.hasProperty( "setOpenItem" ) )
					this.parent.setOpenItem( -1 );
				item.clicked = false;
				this.close();
			}
		}
	}

	function UIDropMenu.open( x, y )
	{
		this.x = x;
		this.y = y;
		this.w = 200;
		this.h = 4;

		this.onlayout();

		foreach( item : this.items )
		{
			item.clicked = false;
			item.mouseon = false;
			item.y = this.h - 2;
			item.height = 0;
			if( item.visible )
			{
				if( item.name !== null )
					item.height = this.font.size + 8;
				else
					item.height = 8;
				this.h += item.height;
			}
		}

		// TODO pull it out of corners and sides
		if( this.x + this.w > this.frame.x + this.frame.w )
			this.x = this.frame.x + this.frame.w - this.w;
		if( this.y + this.h > this.frame.y + this.frame.h )
			this.y = this.frame.y + this.frame.h - this.h;

		this.visible = true;
	}
	function UIDropMenu.close()
	{
		this.visible = false;
		this.frame.moved( this );
	}

	return UIControl.create( UIDropMenu );
}


/*
*
*   T O P   M E N U
*
*/

function ui_default_paint_menu()
{
	var _fo = 3;
	var _scl = [ 200, 1 ];

	SS_DrawButton( this.textures[2], this.x - _fo, this.x + this.w + _fo,
		this.y - _fo, this.y + this.h + _fo, 4, 4 );
	
	foreach( iid, item : this.items )
	{
		if( item.visible && item.inview )
		{
			x = this.x + item.x;
			y = this.y + 2;
			w = item.width;
			h = item.height;
			tex = this.textures[ this.open_item == iid ];
			if( item.mouseon || iid == this.open_item )
				SS_DrawButton( tex, x, x + w, y, y + h, 4, 4 );
			draw_text_rect( item.name, this.font, [0.1,1], DT_CENTER | DT_VCENTER, x, x + w, y - 2, y + h - 2 );
		}
	}

	foreach( ch : this.children )
		if( ch.on_draw )
			ch.on_draw();
}

function UIControl.createMenu()
{
	var UIMenu =
	{
		type = "menu",
		x = 0,
		y = 0,
		w = 9999,
		h = 24,
		on_draw = ui_default_paint_menu,

		textures =
		[
			SS_CreateTexture( "engine/img/menuitemH.png" ),
			SS_CreateTexture( "engine/img/menuitemC.png" ),
			SS_CreateTexture( "engine/img/frame.png" ),
		],

		items = [],
		open_item = -1,
	};

	function UIMenu.onattach()
	{
		UIControl.onattach.thiscall( this );
		this.w = this.parent.w;
	}

	function UIMenu.onresize( w, h )
	{
		this.w = this.parent.w;
		this._super.onresize.thiscall( this, w, h );
	}

	function UIMenu.setOpenItem( iid )
	{
		// close the previous one
		if( this.open_item != -1 &&
			typeid( this.items[ this.open_item ].onclick ) == VT_OBJECT )
			this.items[ this.open_item ].onclick.close();

		this.open_item = iid;

		// open the new one
		if( iid != -1 &&
			typeid( this.items[ iid ].onclick ) == VT_OBJECT )
			this.items[ iid ].onclick.open( this.items[ iid ].x, this.y + 24 );
	}

	function UIMenu.onmousemove( x, y )
	{
		foreach( iid, item : this.items )
		{
			x1 = item.x + this.x;
			x2 = x1 + item.width;
			item.mouseon = x >= x1 && x <= x2;
			if( item.mouseon && this.open_item >= 0 )
				this.setOpenItem( iid );
		}
	}
	function UIMenu.onmousedown( x, y, bid )
	{
		if( bid != 1 )
			return;
		foreach( iid, item : this.items )
		{
			if( item.mouseon )
			{
				item.clicked = true;
				if( this.open_item == iid )
					this.setOpenItem( -1 );
				else
					this.setOpenItem( iid );
			}
		}
	}
	function UIMenu.onmouseup()
	{
		foreach( item : this.items )
		{
			if( item.clicked )
			{
				if( item.onclick && typeid( item.onclick ) != VT_OBJECT )
					item.onclick.thiscall( this );
				item.clicked = false;
			}
		}
	}
	function UIMenu.globalmousedown( x, y )
	{
		// button hits
		btnhit = false;
		vhit = y >= this.y && y <= this.y + this.h;
		foreach( iid, item : this.items )
		{
			btnhit ||= item.mouseon && vhit;
		}

		// child hits
		cat = this.get_ctrl_at( x, y );
		if( cat !== null && cat !== this )
		{
			while( cat.parent != this )
				cat = cat.parent;
			foreach( item : this.items )
			{
				if( item.onclick === cat )
				{
					btnhit = true;
					break;
				}
			}
		}

		// if none, close menu
		if( !btnhit )
			this.setOpenItem( -1 );
	}

	function UIMenu.onleave()
	{
		foreach( item : this.items )
			item.mouseon = false;
	}

	function UIMenu.recalcLayout()
	{
		x = 0;
		xe = this.x + this.w;

		foreach( item : this.items )
		{
			x += 2;
			item.x = x;
			item.width = this.font.get_text_length( item.name ) + 24;
			item.height = this.font.size + 8;
			x += item.width;
			item.inview = x <= this.w;
		}
	}

	function UIMenu.addItem( item )
	{
		this.items.push( item );
		if( typeid( item.onclick ) == VT_OBJECT )
			this.addChild( item.onclick );
		return item;
	}

	return UIControl.create( UIMenu );
}


/*
*
*   E X T E N D E D
*
*/

/*
	Scrollbars
*/
function UIControl.createVScroll( x, y, w, h, onchange )
{
	btnh = 16;
	if( btnh * 2 > h )
		btnh = h / 2;

	var UIVScroll =
	{
		x = x,
		y = y,
		w = w,
		h = h,
		hview = 100, // view height
		hcontent = 10, // content height
		pos = 0, // content offset (0 to hcontent-hview)
		btnh = btnh,
		visible = true,
		onchange = onchange,
		texture = SS_CreateTexture( "engine/img/frame.png" ),
	};

	function UIVScroll.on_draw()
	{
		if( !this.visible )
			return;
		SS_DrawButton( this.texture, this.ax - 2, this.ax + this.w + 2,
			this.ay - 2, this.ay + this.h + 2, 4, 4 );
		foreach( c : this.children )
			c.on_draw();
	}

	function UIVScroll.setView( view, cont, pos )
	{
		this.hview = view;
		this.hcontent = cont;
		if( view >= cont )
			hvcaspect = 1;
		else
			hvcaspect = view / cont;
		this.children[ 1 ].h = ( this.h - this.btnh * 2 - 4 ) * hvcaspect;
		this.onlayout();
		this.setPos( pos );
	}
	function UIVScroll.setPos( pos )
	{
		if( pos < 0 || this.hview >= this.hcontent ) pos = 0;
		if( pos > 1 ) pos = 1;
		this.pos = pos;

		btn = this.children[ 1 ];
		btn.y = this.btnh + 2 + ( this.h - btn.h - this.btnh * 2 - 4 ) * pos;
		if( this.onchange )
			this.onchange();
		btn.onlayout();
	}
	function UIVScroll.onclick()
	{
		if( this.frame.lmpos_y < this.children[ 1 ].ay )
			this.setPos( this.pos - 150 / this.hcontent );
		else
			this.setPos( this.pos + 150 / this.hcontent );
	}

	var ctl = UIControl.create( UIVScroll );
	ctl.ax = x;
	ctl.ay = y;

	if( ctl.hview >= ctl.hcontent )
		hvcaspect = 1;
	else
		hvcaspect = ctl.hview / ctl.hcontent;

	ctl.addChild( vsub = UIControl.createButton( "U", 0, 0, w, btnh ) );
	ctl.addChild( vssb = UIControl.createButton( "", 0, btnh + 2,
		w, ( h - btnh * 2 - 4 ) * hvcaspect ) );
	ctl.addChild( vsdb = UIControl.createButton( "D", 0, h - btnh, w, btnh ) );

	vsub.icon = SS_CreateTexture( "engine/img/btnup.png" );
	vsdb.icon = SS_CreateTexture( "engine/img/btndn.png" );

	function vssb.onmousedown( x, y, bid )
	{
		if( bid == 1 )
		{
			this.parent.btny = this.y;
			this.parent.refy = y;
		}
		UIControl.onmousedown.thiscall( this, x, y, bid );
	}
	function vssb.globalmousemove( x, y )
	{
		if( this.clicked )
		{
			ymin = this.parent.btnh + 2;
			ymax = this.parent.h - this.parent.btnh - this.h - 2;
			this.y = this.parent.btny;
			if( abs( this.ax + this.w * 0.5 - x ) < 200 )
				this.y += y - this.parent.refy;
			if( this.y < ymin ) this.y = ymin;
			if( this.y > ymax ) this.y = ymax;
			if( ymin == ymax )
				this.parent.pos = 0;
			else
				this.parent.pos = ( this.y - ymin ) / ( ymax - ymin );
			if( this.parent.onchange )
				this.parent.onchange();
			this.onlayout();
		}
	}

	function vsub.onclick()
	{
		this.parent.setPos( this.parent.pos - 60 / this.parent.hcontent );
	}
	function vsdb.onclick()
	{
		this.parent.setPos( this.parent.pos + 60 / this.parent.hcontent );
	}

	return ctl;
}

/*
	Listbox
*/
function UIControl.createListBox( key, options, selected, x, y, w, h, onchange )
{
	var UIListBox =
	{
		x = x,
		y = y,
		w = w,
		h = h,
		open = false,
		key = key,
		hbase = h,
		hopen = [options.size, 10][options.size > 10] * 24,
		hfull = options.size * 24,
		scroll = options.size > 10,
		onchange = onchange,
		options = options,
		selected = selected,
		hover = -1,
		textures =
		[
			SS_CreateTexture( "engine/img/menuitemH.png" ),
			SS_CreateTexture( "engine/img/menuitemC.png" ),
			SS_CreateTexture( "engine/img/frame.png" ),
		],
	};

	function UIListBox.on_draw()
	{
		if( this.open )
		{
			SS_DrawButton( this.textures[2], this.ax - 2, this.ax + this.w + 2,
				this.ay - 2, this.ay + this.hbase + this.hopen + 2, 4, 4 );
			if( this.frame.pushRect( this.ax, this.ax + this.w, this.ay + this.hbase, this.ay + this.h ) )
			{
				foreach( i, opt : this.options )
				{
					x1 = this.ax;
					x2 = x1 + this.w;
					y1 = this.ay + this.hbase + i * 24 - this.children[1].pos * ( this.hfull - this.hopen );
					y2 = y1 + 24;
					if( i == this.hover && this.mouseon )
						SS_DrawButton( this.textures[ this.clicked ], x1 + 2, x2 - 2, y1 + 2, y2 - 2, 4, 4 );
					draw_text_rect( opt, this.font, [0.1,1.0],
						DT_LEFT | DT_VCENTER, x1 + 4, x2 - 4, y1 + 2, y2 - 4 );
				}
				this.frame.popRect();
			}
		}

		foreach( c : this.children )
			c.on_draw();
	}

	function UIListBox.onmousedown( x, y, bid )
	{
		if( this.open )
		{
			if( bid == 4 ) this.children[1].children[0].onclick();
			if( bid == 5 ) this.children[1].children[2].onclick();
		}
		UIControl.onmousedown.thiscall( this, x, y, bid );
	}

	function UIListBox.onhittest( x, y )
	{
		if( !this.open && !this.children[0].onhittest( x, y ) )
			return false;
		return UIControl.onhittest.thiscall( this, x, y );
	}
	function UIListBox.onmousemove( x, y )
	{
		this.hover = -1;
		foreach( i, opt : this.options )
		{
			x1 = this.ax;
			x2 = x1 + this.w;
			y1 = this.ay + this.hbase + i * 24 - this.children[1].pos * ( this.hfull - this.hopen );
			y2 = y1 + 24;
			if( x1 <= x && x2 > x && y1 <= y && y2 > y )
			{
				this.hover = i;
				break;
			}
		}
	}
	function UIListBox.close()
	{
		this.open = false;
		this.children[1].visible = false;
	}
	function UIListBox.onclick()
	{
		this.select( this.hover );
		this.close();
	}
	function UIListBox.globalmouseup( x, y, bid )
	{
		if( this.open && !this.onhittest( x, y ) )
			this.close();
	}

	function UIListBox.select( id )
	{
		this.selected = id;
		if( id >= 0 )
			name = this.options[ id ];
		else
			name = "";
		this.children[ 0 ].name = name;
		this.frame.formdata[ this.key ] = id;
		if( this.onchange )
			this.onchange( this );
	}

	var ctl = UIControl.create( UIListBox );
	ctl.ax = x;
	ctl.ay = y;

	if( selected >= 0 )
		name = options[ selected ];
	else
		name = "";
	var onclk = function()
	{
		this.parent.open = !this.parent.open;
		this.parent.children[ 1 ].visible = this.parent.open && this.parent.scroll;
		this.parent.h = this.parent.hbase;
		if( this.parent.open )
			this.parent.h += this.parent.hopen;
		else
			this.parent.close();
	};
	ctl.addChild( lb_btn = UIControl.createButton( name, 0, 0, w, 24, onclk ) );
	lb_btn.icon = SS_CreateTexture( "engine/img/btndn.png" );
	function lb_btn.on_draw()
	{
		clk = this.clicked || this.parent.open;
		mon = this.mouseon; if( clk ) mon = 0;
		tex = this.textures[ mon + clk * 2 ];
		SS_DrawButton( tex, this.ax - 4, this.ax + this.w + 4, this.ay - 4, this.ay + this.h + 4 );

		draw_text_rect( this.name, this.font, [0.9,1], DT_LEFT | DT_VCENTER,
			this.ax + 4, this.ax + this.w - 4, this.ay + 5, this.ay + this.h - 3 );
		draw_text_rect( this.name, this.font, [0.1,1], DT_LEFT | DT_VCENTER,
			this.ax + 4, this.ax + this.w - 4, this.ay + 4, this.ay + this.h - 4 );
		draw_fitted( this.icon, this.ax + 4, this.ax + this.w - 4,
			this.ay + 2, this.ay + this.h - 2 + this.parent.open * 2, DT_RIGHT | DT_VCENTER );
	}

	ctl.addChild( vscb = UIControl.createVScroll( w - 16, h + 2, 16, UIListBox.hopen - 2 ) );
	vscb.setView( ctl.hopen, ctl.hfull, 0 );
	vscb.visible = false;

	return ctl;
}


/*
*
*   D I A L O G S
*
*/

global UIDialog = {};

/*
	Filler
	- renders semi-transparent black background and the children
*/
function UIDialog.createFiller()
{
	var UIFiller =
	{
		x = 0,
		y = 0,
		w = 0,
		h = 0,
	};

	function UIFiller.onresize( w, h )
	{
		this.w = w;
		this.h = h;
		UIControl.onresize.thiscall( this, w, h );
	}
	function UIFiller.onattach()
	{
		UIControl.onattach.thiscall( this );
		this.x = this.parent.x;
		this.y = this.parent.y;
		this.w = this.parent.w;
		this.h = this.parent.h;
	}
	function UIFiller.on_draw()
	{
		draw({ preset = "tile", position = [this.x,this.y],
			scale = [this.w,this.h], color = [0,0,0,0.5] });
		foreach( c : this.children )
			c.on_draw();
	}

	return UIControl.create( UIFiller );
}

/*
	Wrapper
	- renders a box and the children
*/
function UIDialog.createWrapper( x, y, w, h )
{
	var UIWrapper =
	{
		x = x,
		y = y,
		w = w,
		h = h,
		texture = SS_CreateTexture( "engine/img/frame.png" ),
	};

	function UIWrapper.on_draw()
	{
		SS_DrawButton( this.texture, this.x - 4, this.x + this.w + 4,
			this.y - 4, this.y + this.h + 4, 4, 4 );
		foreach( c : this.children )
			c.on_draw();
	}

	return UIControl.create( UIWrapper );
}

/*
	A Question popup
	- calls the callback with 1/0/-1(cancel)
*/
function UIDialog.createQuestion( frame, text, callback, cancel )
{
	cancel ||= false;

	filler = UIDialog.createFiller();
	frame.addChild( filler );

	wrap_width = 400;
	wrap_height = 200;
	wrap_x = frame.x + ( frame.w - wrap_width ) * 0.5;
	wrap_y = frame.y + ( frame.h - wrap_height ) * 0.5;

	wrapper = UIDialog.createWrapper( wrap_x, wrap_y, wrap_width, wrap_height );
	filler.addChild( wrapper );

	tbx = UIControl.createText( text, 30, 30, wrap_width - 60, 100, DT_CENTER | DT_VCENTER );
	wrapper.addChild( tbx );

	btn_yes = UIControl.createButton( "Yes", 30, 150, 100, 30,
		function() use ( callback, filler ){ callback( 1 ); filler.remove(); } );
	wrapper.addChild( btn_yes );

	no_off = 150;
	if( !cancel )
		no_off = 270;
	btn_no = UIControl.createButton( "No", no_off, 150, 100, 30,
		function() use ( callback, filler ){ callback( 0 ); filler.remove(); } );
	wrapper.addChild( btn_no );

	if( cancel )
	{
		btn_no = UIControl.createButton( "Cancel", 270, 150, 100, 30,
			function() use ( callback, filler ){ callback( false ); filler.remove(); } );
		wrapper.addChild( btn_no );
	}
}


/*
*
*   F R A M E
*
*/

global UIFrame =
{
	name = "__frame__",
	type = "frame",
	x = 0,
	y = 0,
	ax = 0,
	ay = 0,
	w = 9999,
	h = 9999,
	
	curhover = null,
	curclick = null,
	curclick3 = null,
	lmpos_x = null,
	lmpos_y = null,
};

function UIFrame.addChild( ch )
{
	UIControl.addChild.thiscall( this, ch );
	ch.frame = this;
	return ch;
}

function UIFrame.moved( me )
{
	if( this.curhover == me )
	{
		this.curhover = null;
	}
}

function UIFrame.event( e )
{
	if( e.type == SDL_WINDOWEVENT && e.event == SDL_WINDOWEVENT_RESIZED )
	{
		this.w = e.data1;
		this.h = e.data2;
		this.onresize( this.w, this.h );
		this.onlayout();
	}
	if( e.type == SDL_MOUSEMOTION )
	{
		this.lmpos_x = e.x;
		this.lmpos_y = e.y;
		this.globalmousemove( e.x, e.y, e.xrel, e.yrel );
		var ctrl = this.get_ctrl_at( e.x, e.y );
		if( ctrl !== this.curhover )
		{
			if( this.curhover !== null )
				this.curhover.onleave();
			this.curhover = ctrl;
			if( ctrl !== null )
				ctrl.onenter();
		}
		if( ctrl !== null )
			ctrl.onmousemove( e.x, e.y );
	}
	if( e.type == SDL_MOUSEBUTTONDOWN || e.type == SDL_MOUSEBUTTONUP )
	{
		var ctrl = this.get_ctrl_at( e.x, e.y );
		if( e.type == SDL_MOUSEBUTTONDOWN )
		{
			this.globalmousedown( e.x, e.y, e.button );
			if( ctrl !== null )
				ctrl.onmousedown( e.x, e.y, e.button );
			if( e.button == 1 )
				this.curclick = ctrl;
			if( e.button == 3 )
				this.curclick3 = ctrl;
		}
		else
		{
			this.globalmouseup( e.x, e.y, e.button );
			if( ctrl !== null )
				ctrl.onmouseup( e.x, e.y, e.button );
			if( e.button == 1 )
			{
				if( this.curclick !== null && ctrl !== this.curclick )
					this.curclick.onmouseup( e.x, e.y, e.button );
				this.curclick = null;
			}
			if( e.button == 3 )
			{
				if( this.curclick3 !== null && ctrl !== this.curclick3 )
					this.curclick3.onmouseup( e.x, e.y, e.button );
				this.curclick3 = null;
			}
		}
	}
}

function UIFrame.draw()
{
	if( !this.w || !this.h )
	{
		WARNING( "UIFrame::draw - invalid frame size" );
		return;
	}
	SS_SetCameraUI( this.x, this.x+this.w, this.y, this.y+this.h );
	foreach( ch : this.children )
	{
		if( ch.on_draw )
			ch.on_draw();
	}
}

function UIFrame.pushRect( x1, x2, y1, y2 )
{
	if( this.rects.size )
		tr = this.rects[ this.rects.size - 1 ];
	else
		tr = { x1 = 0, x2 = this.w, y1 = 0, y2 = this.h };

	if( tr.x1 >= x2 || tr.x2 <= x1 || tr.y1 >= y2 || tr.y2 <= y1 )
		return false;
	
	if( x1 < tr.x1 ) x1 = tr.x1;
	if( x2 > tr.x2 ) x2 = tr.x2;
	if( y1 < tr.y1 ) y1 = tr.y1;
	if( y2 > tr.y2 ) y2 = tr.y2;
	this.rects.push({ x1 = x1, x2 = x2, y1 = y1, y2 = y2 });
	set_cliprect( x1, x2, y1, y2 );
	return true;
}

function UIFrame.popRect()
{
	this.rects.pop();
	if( this.rects.size )
	{
		tr = this.rects[ this.rects.size - 1 ];
		set_cliprect( tr.x1, tr.x2, tr.y1, tr.y2 );
	}
	else
		set_cliprect( null );
}

function UIFrame.create( w, h )
{
	var f = clone( UIFrame );
	f.formdata = {};
	f.w = w;
	f.h = h;
	f.rects = [];
	return UIControl.create( f );
}
