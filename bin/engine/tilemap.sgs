
global Tilemap = {};

function Tilemap.create( texture, tileWidth, tileHeight )
{
	return class
	({
		texture = texture,
		tileW = tileWidth,
		tileH = tileHeight,
		tiles = map(),
		revid = 1,
		vfmt = make_vertex_format( "|pf2tf2cf4" ),
		rb = create_renderbuf(),
	},
	Tilemap );
}

function Tilemap.get( x, y )
{
	key = x + y * 0xffff;
	if( isset( this.tiles, key ) )
		return this.tiles[ key ];
	return null;
}

function Tilemap.set( x, y, tx, ty, col3or4 )
{
	key = x + y * 0xffff;
	this.tiles[ key ] = [ x, y, tx, ty, col3or4 ];
	this.revid++;
}

function Tilemap.checkCache()
{
	if( !this.revid )
		return;
	
	tw = this.tileW;
	th = this.tileH;
	itw = 1.0 / this.texture.width;
	ith = 1.0 / this.texture.height;
	rb = this.rb.begin();
	foreach( tile : this.tiles )
	{
		x = tile[0] * tw;
		y = tile[1] * th;
		tx = tile[2] * tw * itw;
		ty = tile[3] * th * itw;
		tx1 = tx + tw * itw;
		ty1 = ty + th * itw;
		col = tile[4];
		col0 = col[0];
		col1 = col[1];
		col2 = col[2];
		col3 = if( col.size >= 4, col[3], 1.0 );
		
		rb.f( x, y, tx, ty, col0, col1, col2, col3 );
		rb.f( x+tw, y, tx1, ty, col0, col1, col2, col3 );
		rb.f( x+tw, y+th, tx1, ty1, col0, col1, col2, col3 );
		
		rb.f( x+tw, y+th, tx1, ty1, col0, col1, col2, col3 );
		rb.f( x, y+th, tx, ty1, col0, col1, col2, col3 );
		rb.f( x, y, tx, ty, col0, col1, col2, col3 );
	}
	this.revid = 0;
}

function Tilemap.render()
{
	this.checkCache();
	
	this.rb.draw( this.texture, this.vfmt, 0, map_size( this.tiles ) * 6, PT_TRIANGLES );
}
