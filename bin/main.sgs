
include "fmt", "engine/all.sgs";


function configure()
{
	global sys_exit;

	editor = false;
	
	for( i = 0; i < sys_args.size; ++i )
	{
		var arg = sys_args[ i ];
		if( arg == "-preexit" )
		{
			println( "PREEXIT" );
			sys_exit = true;
		}
		else if( arg == "-profile" )
		{
			enable_profiler();
			println( "PROFILER ENABLED" );
		}
		else if( arg == "-profile-ops" )
		{
			enable_profiler2();
			println( "PROFILER [mode 2] ENABLED" );
		}
		else if( arg == "-editor" )
		{
			editor = true;
		}
	}

	if( editor )
	{
		include_file( "editor/main.sgs" );
		configure();
	}
}

// global W, H, W1 = 1024, H1 = 576, F1 = "", W2 = 1600, H2 = 900, F2 = "", which = 2;
global W, H, W1 = 1024, H1 = 576, F1 = "", W2 = 1024, H2 = 576, F2 = "vsync", which = 2;

function switch()
{
	global W, H, W1, H1, F1, W2, H2, F2, which;
	
	which = 3 - which;
	if( which == 1 )
	{
		set_video_mode( W1, H1, 32, F1 );
		W = W1; H = H1;
	}
	else
	{
		set_video_mode( W2, H2, 32, F2 );
		W = W2; H = H2;
	}
}

function initialize()
{
	set_caption( "The SGS-SDL Game Framework" );
	printvar( list_video_modes("fullscreen") );
	set_gl_attrib( SDL_GL_DEPTH_SIZE, 24 );
	set_gl_attrib( SDL_GL_STENCIL_SIZE, 8 );
	switch();
//	grab_input(true);
//	show_cursor(false);
	
	global UI = UIFrame.create();
//	UI.addChild( UIControl.createButton( "Make it rain!", 10, 10, 120, 40, function(){} ) );

	global TM = Tilemap.create( create_texture( "ntset.png", "nolerp" ), 32, 32 );
	floor = _G.floor;
	randf = _G.randf;
	for( y = 0; y < 64; ++y )
	{
		for( x = 0; x < 64; ++x )
		{
			TM.set( x, y, floor( randf() * 3.99 ), floor( randf() * 3.99 ), [1,1,1] );
		}
	}
	
	println();
	global image = create_texture( "crosshair.png", "mipmaps" );
	println( image );
	printvar( _Gtex );
	println();
}

global mpos = [0,0];

global lasttime = ftime();
global rotation = 0;

function update()
{
	global lasttime, rotation, P, W, H;
	var curtime = ftime();
	var delta = curtime - lasttime;
	if( delta > 1.0/15.0 )
		delta = 1.0/15.0;
	lasttime = curtime;
	
	rotation += delta;
	
	var cc = [0.1,0.2,0.4];
	clear( cc );
	
	set_camera_2d( 500, 500, 500, W/H, 0 );
	
	TM.render();
	
	vdata = fmt_pack( "5f12x 5f12x 5f12x 5f12x",
		100, 100, 0, 0, 0,
		200, 100, 0, 1, 0,
		300, 300, 0, 1, 1,
		100, 200, 0, 0, 1
	);
	vfmt = make_vertex_format( "|pf3tf2" );
	idata = fmt_pack( "4w", 1, 2, 3, 0 );
	draw_packed( image, vfmt, vdata, 0, 4, PT_TRIANGLE_FAN );
	draw_packed( image, vfmt, vdata, 0, 4, PT_TRIANGLE_FAN, idata );
	
	set_camera_ui( 0, W, 0, H );
	
	draw({ preset = "box", texture = image, position = mpos, scale = [128,128], angle = rotation * M_PI });
	
	UI.draw();
	
	fn = create_font( "verdana.ttf", 16 );
	tx = "frame time: " $ ( ftime() - lasttime ) * 1000.0 $ " ms";
	draw_text_line( tx, fn, 301, 1, [0,0,0,1] );
	draw_text_line( tx, fn, 300, 0, [1] );
	
	present();

	sleeptime = 15 - delta * 1000;
	if( sleeptime > 0 ) sleep( sleeptime );
}

function on_event( e )
{
	if( e.type == SDL_QUIT )
		global sys_exit = true;
	if( e.type == SDL_MOUSEMOTION )
	{
		global mpos = [e.x,e.y];
//		println( get_relative_mouse_state() );
	}
	if( e.type == SDL_KEYDOWN && e.keycode == SDLK_F11 )
		switch();
	if( e.type == SDL_VIDEO_DEVICELOST ) println( "Device lost!" );
	if( e.type == SDL_VIDEO_DEVICERESET ) println( "Device reset!" );

	UI.event( e );
}

function cleanup()
{
}
