
include "utils/playlist_menu";


global initialWidth = 600;
global initialHeight = 500;

function configure()
{
	for( i = 0; i < sys_args.size; ++i )
	{
		var arg = sys_args[ i ];
		if( arg == "-mainfile" )
		{
			i++;
			if( i >= sys_args.size )
				ERROR( "main file not specified after '-mainfile'" );
			old_cfg = configure;
			include( sys_args[ i ] );
			if( configure !== old_cfg ) // avoid infinite loops
				configure();
		}
	}
}

function initialize()
{
	force_opengl = false;
	
	println( "SGS-SDL Framework Test suite" );
	println( "initialization started at: " $ ftime() );
	
	global Window = SS_CreateWindow( "SGS-SDL Framework Test suite",
		SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
		initialWidth, initialHeight, SDL_WINDOW_RESIZABLE |
		if( force_opengl, SDL_WINDOW_OPENGL, SDL_WINDOW_OPENGLMAYBE ) );
	println( "window created at: " $ ftime() );
	Window.initRenderer( if( force_opengl, SS_RENDERER_OPENGL, SS_RENDERER_DONTCARE ),
		SS_RENDERER_DONTCARE, SS_RENDERER_VSYNC );
	println( "renderer initialized at: " $ ftime() );
	
	global Surf = SS_CreateRenderTexture( Window.width, Window.height );
	
	global Font = @SS_CreateFont( "verdana.ttf", 12 ) || SS_CreateFont( "Verdana.ttf", 12 );
	
	SS_InitDrawFunctions();
	println( "drawing functions initialized at: " $ ftime() );
	
	global lasttime = ftime();
	
	options = [];
	foreach( real, item : io_dir("tests") )
	{
		if( real )
		{
			fn = function( item ){ os_command( sys_args[0] $ " -mainfile tests/" $ item.id ); };
			options.push({ id = item, text = string_part( item, 0, -4 ), action = fn });
		}
	}
	global PMenu = PlaylistMenu.create
	(options,
	{
		x = 32,
		y = 32,
	});
	
	global LogoTexture = SS_CreateTexture( "logo-red.png" );
	println( "initialization ended at: " $ ftime() );
}

function update()
{
	global lasttime;
	var curtime = ftime();
	var delta = curtime - lasttime;
	lasttime = curtime;
	if( delta > 1.0/15.0 )
		delta = 1.0/15.0;
	
	W = Window.width;
	H = Window.height;
	
	SS_SetCameraUI( 0, W, 0, H );
	
	SS_SetRenderTarget( Surf );
	SS_Clear( color(0.7,0.7,0.7) );
	
	SS_SetRenderTarget();
	
	SS_Clear( color(0.1,0.1,0.1) );
	
	Wslash = W / 2 + 1;
	Hslash = round( H * 0.6 );
	topMaxSize = max( Wslash, Hslash );
	btmMaxSize = max( Wslash, H - Hslash );
	
	SS_DrawColor2VRect( 0, Hslash - topMaxSize, W, Hslash, 0.8, 0.8, 0.8, 1, 0.5, 0.5, 0.5, 1 );
	SS_DrawColor2VRect( 0, Hslash, W, Hslash + btmMaxSize, 0.4, 0.4, 0.4, 1, 0.2, 0.2, 0.2, 1 );
	
	PMenu.draw( delta );
	
	tW = LogoTexture.width;
	tH = LogoTexture.height;
	SS_Draw({ preset = "tile", position = vec2( W * 0.9 - tW - 32, Hslash - tH + 24 ), scale = vec2( tW, tH ), texture = LogoTexture });
	SS_Draw({ preset = "tile", position = vec2( W * 0.9 - tW - 32, Hslash + tH + 24 ), scale = vec2( tW, -tH ), texture = LogoTexture, color = color(0.5,0.5,0.5,0.5) });
	
//	SS_Draw({ preset = "tile", position = vec2( W/2, H/2 - 32 ), scale = vec2( 128, 128 ), texture = Surf });
	
	SS_Present();

	sleeptime = 15 - ( ftime() - lasttime ) * 1000;
	if( sleeptime > 0 ) SS_Sleep( sleeptime );
}

function on_event( e )
{
	if( e.type == SDL_QUIT )
		global sys_exit = true;
	if( e.type == SDL_VIDEODEVICELOST )
	{
		global Surf = null;
	}
	if( e.type == SDL_VIDEODEVICERESET )
	{
		global Surf = SS_CreateRenderTexture( Window.width, Window.height );
	}
	PMenu.on_event( e );
}

function cleanup()
{
}
