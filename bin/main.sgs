
include "utils/playlist_menu";


global initialWidth = 600;
global initialHeight = 500;

function configure()
{
	for( i = 0; i < sys_args.size; ++i )
	{
		var arg = sys_args[ i ];
		if( arg == "-mainfile" )
		{
			i++;
			if( i >= sys_args.size )
				ERROR( "main file not specified after '-mainfile'" );
			old_cfg = configure;
			include( sys_args[ i ] );
			if( configure !== old_cfg ) // avoid infinite loops
				configure();
		}
	}
}

function initialize()
{
	force_opengl = false;
	
	println( "SGS-SDL Framework Test suite" );
	println( "initialization started at: " $ ftime() );
	
	global Window = SS_CreateWindow( "SGS-SDL Framework Test suite",
		SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
		initialWidth, initialHeight, SDL_WINDOW_RESIZABLE |
		if( force_opengl, SDL_WINDOW_OPENGL, SDL_WINDOW_OPENGLMAYBE ) );
	println( "window created at: " $ ftime() );
	Window.initRenderer( if( force_opengl, SS_RENDERER_OPENGL, SS_RENDERER_DONTCARE ), SS_RENDERER_VSYNC );
	println( "renderer initialized at: " $ ftime() );
	
	Window.setMinSize( 300, 200 );
//	Window.setBufferScale( 600, 500, SS_POSMODE_FITRND );
	
	global Font = SS_CreateFont( "fonts/lato-regular.ttf", 12 );
	
	SS_InitDrawFunctions();
	println( "drawing functions initialized at: " $ ftime() );
	
	global lasttime = ftime();
	
	options = [];
	foreach( real, item : io_dir("tests") )
	{
		if( real && string_part( item, 0, 1 ) != "." )
		{
			fn = function( item ){ os_command( sys_args[0] $ " -mainfile tests/" $ item.id ); };
			options.push({ id = item, text = string_part( item, 0, -4 ), action = fn });
		}
	}
	for( i = 0; i < 32; ++i )
;//		options.push({ id = i+1000, text = randf() * 1234, action = function(){} });
	global PMenu = PlaylistMenu.create
	(options,
	{
		x = 32,
		y = 32,
		width = ( initialWidth - 64 ) * 4/7,
		height = initialHeight - 64,
		font = "fonts/armata-regular.ttf",
	});
	
	global LogoTexture = SS_CreateTexture( "images/logo-red.png" );
	global SunLineTexture = SS_CreateTexture( "images/sun-line.png" );
	println( "initialization ended at: " $ ftime() );
}

function update()
{
	global lasttime;
	var curtime = ftime();
	var delta = curtime - lasttime;
	lasttime = curtime;
	if( delta > 1.0/15.0 )
		delta = 1.0/15.0;
	
	W = Window.bbWidth;
	H = Window.bbHeight;
	
	SS_SetCameraUI( 0, W, 0, H );
	
	SS_Clear( color(0.1,0.1,0.1) );
	
	Wslash = W / 2 + 1;
	Hslash = round( H * 0.6 );
	topMaxSize = max( Wslash, Hslash );
	btmMaxSize = max( Wslash, H - Hslash );
	
	C1 = color( 38/255, 85/255, 160/255, 1 ); // color( 0.8, 1 );
	C2 = color( 140/255, 173/255, 206/255, 1 ); // color( 0.5, 1 );
	C1m = C1 * color(0.2,1);
	C2m = C2 * color(0.8,1);
	
	SS_DrawColor2VRect( 0, Hslash - topMaxSize, W, Hslash, C1.r, C1.g, C1.b, C1.a, C2.r, C2.g, C2.b, C2.a );
	SS_DrawColor2VRect( 0, Hslash, W, Hslash + btmMaxSize, C2m.r, C2m.g, C2m.b, C2m.a, C1m.r, C1m.g, C1m.b, C1m.a );
	
	sunMaxSize = btmMaxSize * 0.5;
	sunBtmMaxSize = btmMaxSize * 0.3;
	sunColor = color( 0.9, 0.5, 0.1, 1 );
	SS_SetBlending( SS_BLENDOP_ADD, SS_BLEND_SRCALPHA, SS_BLEND_ONE );
	SS_Draw({ preset = "tile", position = vec2(0,Hslash - sunMaxSize), scale = vec2(W,sunMaxSize), texture = SunLineTexture, color = sunColor });
	SS_Draw({ preset = "tile", position = vec2(0,Hslash + sunBtmMaxSize), scale = vec2(W,-sunBtmMaxSize), texture = SunLineTexture, color = sunColor * color(0.8,1) });
	SS_SetBlending( SS_BLENDOP_ADD, SS_BLEND_SRCALPHA, SS_BLEND_INVSRCALPHA );
	
	tW = LogoTexture.width;
	tH = LogoTexture.height;
	SS_Draw({ preset = "tile", position = vec2( W * 0.9 - tW - 32, Hslash - tH + 24 ), scale = vec2( tW, tH ), texture = LogoTexture });
	SS_Draw({ preset = "tile", position = vec2( W * 0.9 - tW - 32, Hslash + tH + 24 ), scale = vec2( tW, -tH ), texture = LogoTexture, color = color(0.5,0.5,0.5,0.5) });
	
	PMenu.draw( delta );
	
	SS_Present();

	sleeptime = 15 - ( ftime() - lasttime ) * 1000;
	if( sleeptime > 0 ) SS_Sleep( sleeptime );
}

function on_event( e )
{
	if( e.type == SDL_QUIT )
		global sys_exit = true;
	PMenu.on_event( e );
	if( e.type == SDL_WINDOWEVENT && e.event == SDL_WINDOWEVENT_SIZE_CHANGED )
		PMenu.resize( ( e.data1 - 64 ) * 4/7, e.data2 - 64 );
}

function cleanup()
{
}
