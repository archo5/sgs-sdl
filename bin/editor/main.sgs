
include_file( "engine/all.sgs" );
include_file( "editor/system.sgs" );


global ED_msg_alpha = 0, ED_msg_text = "";
function ED_message( msg )
{
	global ED_msg_text = msg,
	       ED_msg_alpha = 1;
}


function ED_resetAll()
{
	global ED;
	var oed = ED;
	ED = ED_createState();
	ED.show_grid = oed.show_grid;
	ED.snap_grid = oed.snap_grid;
}
function ED_toggleViewGrid( item )
{
	ED.show_grid = !ED.show_grid;
	item.icon = ED.show_grid;
}
function ED_toggleSnapGrid( item )
{
	ED.snap_grid = !ED.snap_grid;
	item.icon = ED.snap_grid;
}


function topmenu_file_new()
{
	cb = function( res ){ if( res ) ED_resetAll(); };
	UIDialog.createQuestion( UI, "Do you really want to clear everything?", cb );
}
function topmenu_file_quit()
{
	if( ED.modified )
	{
		function cb( res )
		{
			if( res == 1 )
				println( "Saving..." );
			else if( res === 0 )
				global sys_exit = true;
		}
		UIDialog.createQuestion( UI, "You have unsaved changes. Do you want to save?", cb, true );
	}
	else
	{
		global sys_exit = true;
	}
}


function configure()
{
}

function initialize()
{
	set_caption( "Level Editor" );
	set_video_mode( 1024, 576, 32, "resizable" );

	global lasttime = ftime();

	ED_initialize();

	ED_createObject( "misc", 32, 32 );
	ED_createObject( "player", 64, 32 );
	ED_createObject( "metadata", 128, 32 );
	
	global UITopMenu, UI = UIFrame.create( 1024, 576 );
	
	UI.addChild( UITopMenu = UIControl.createMenu() );

	UI.formdata[ "editmode" ] = ED.mode = EM_EDIT;
	function ed_changemode(){ ED.mode = UI.formdata[ "editmode" ]; };
	UITopMenu.addChild( UIControl.createText( "Mode:", 150, 0, 50, 22, DT_CENTER | DT_VCENTER ) );
	var mopts = [ "View", "Edit", "Put", "Paint", "Erase" ];
	UITopMenu.addChild( UIControl.createListBox( "editmode", mopts, EM_EDIT, 200, 0, 80, 24, ed_changemode ) );

	UITopMenu.addChild( UIControl.createText( "Object:", 300, 0, 60, 22, DT_CENTER | DT_VCENTER ) );
	var opts = [ "First", "Some option", "The following one...", "uhdslfhajlsh", "what what what",
		"1111111 one one one", "this is not the stop", "nor is it the end", "of time and whatever",
		"but we shall see", "what the fuck", "is it", "soon." ];
	if( true )
	{
		opts = [];
		foreach( v : EDOLIST )
			opts.push( v.name );
	}
	UI.formdata[ "object_type" ] = 0;
	UITopMenu.addChild( UIControl.createListBox( "object_type", opts, 0, 360, 0, 200, 24 ) );

	UITopMenu.addChild( propbtn = UIControl.createSwitch( "Show properties", "show_props", 0, 0, 120, 24 ) );
	propbtn.right_margin = 0;
	function propbtn.onresize()
	{
		this.x = this.parent.w - this.w - this.right_margin;
	}
	propbtn.onresize();

	// FILE //
	mi_file = UIControl.createDropMenu();
	mi_file.items.push( UICreateItem( "New", topmenu_file_new ) );
	mi_file.items.push( UICreateItem( "Open" ) );
	mi_file.items.push( UICreateItem() );
	mi_file.items.push( UICreateItem( "Quit", topmenu_file_quit ) );
	UITopMenu.addItem( UICreateItem( "File", mi_file ) );

	// OPTIONS //
	mi_opts = UIControl.createDropMenu();
	mi_opts.items.push( UICreateItem( "Show grid", ED_toggleViewGrid, true ) );
	mi_opts.items.push( UICreateItem( "Snap to grid", ED_toggleSnapGrid, true ) );
	UITopMenu.addItem( UICreateItem( "Options", mi_opts ) );

	UITopMenu.recalcLayout();

	// test ... //
	/*
	global UIDropMenu = UIControl.createDropMenu();
	UI.addChild( UIDropMenu );
	UIDropMenu.items.push( UICreateItem( "Something" ) );
	UIDropMenu.items.push( UICreateItem( "Something else" ) );
	UIDropMenu.items.push( UICreateItem() );
	UIDropMenu.items.push( UICreateItem( "Something before inv" ) );
	ii = UICreateItem( "Invisible" ); ii.visible = false; UIDropMenu.items.push( ii );
	UIDropMenu.items[1].onclick = function(){ println( "Whoa" ); };
	UIDropMenu.items.push( UICreateItem( "Something after inv" ) );

	UI.onclick = closure( function( x, y, bid )
		{ if( bid == 3 ) UIDropMenu.open(x,y); this( x, y, bid ); }
		, UI.onclick );
	*/
}


function ED_render()
{
	global ED_msg_alpha, ED_msg_text;
	var cc = [0.1,0.2,0.4];
	clear( cc );

	ED_draw();

	UI.draw();
	if( ED_msg_alpha > 0 )
	{
		draw_text_rect( ED_msg_text, UI.font, [0.9, ED_msg_alpha], DT_LEFT | DT_BOTTOM, 4, UI.w - 4, 4, UI.h - 4 );
	}
	
	present();
}

function update()
{
	global lasttime, ED_msg_alpha;
	var curtime = ftime();
	var delta = curtime - lasttime;
	if( delta > 1.0/15.0 )
		delta = 1.0/15.0;
	lasttime = curtime;

	if( ED_msg_alpha > 0 )
		ED_msg_alpha -= delta / 3;

	ED_render();

	sleeptime = 15 - delta * 1000;
	if( sleeptime > 0 ) sleep( sleeptime );
}

function on_event( e )
{
	if( e.type == SDL_QUIT || ( e.type == SDL_KEYDOWN && e.keycode == SDLK_F4 && e.mod & KMOD_ALT ) )
		global sys_exit = true;

	ED_event( e );
	UI.event( e );
}

function cleanup()
{
}
