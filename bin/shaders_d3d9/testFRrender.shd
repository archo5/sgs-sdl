
#ifdef VS

float4x4 mWorldView : register(c4);
float4x4 mProj : register(c12);

void main
(
	float4 ipos : POSITION0,
	float3 inrm : NORMAL0,
	float4 icol : COLOR0,
	float2 itex : TEXCOORD0,
	out float4 opos : POSITION0,
	out float4 otfpos : TEXCOORD1,
	out float4 oT : TEXCOORD2,
	out float3 oN : TEXCOORD3,
	out float4 ocol : COLOR0,
	out float2 otex : TEXCOORD0
)
{
	float4 viewPos = mul( mWorldView, ipos );
	opos = mul( mProj, viewPos );
	otfpos = viewPos;
	oT = float4( mul( mWorldView, float4( 1, 0, 0, 0 ) ).xyz, 1 );
	oN = mul( mWorldView, float4( inrm, 0 ) ).xyz;
	ocol = icol;
	otex = itex;
}

#elif defined(PS)

sampler2D Tex0 : register(s0);
sampler2D Tex1 : register(s1);
samplerCUBE EnvMap : register(s8);

float4x4 mInvView : register(c12);

struct PointLight /* size: 2c */
{
	float4 vposrad;
	float4 colpow;
};

float gPLightCount : register(c28);
PointLight gPLights[32] : register(c32); /* ends before c96 */

void main
(
	float4 itfpos : TEXCOORD1,
	float4 iT : TEXCOORD2,
	float3 iN : TEXCOORD3,
	float4 icol : COLOR0,
	float2 itex : TEXCOORD0,
	out float4 ocol0 : COLOR0,
	out float4 ocol1 : COLOR1
)
{
	float3 col = tex2D( Tex0, itex ).rgb * icol.rgb;
	float3 nrm = tex2D( Tex1, itex ).rgb * 2 - 1;
	float3 albedo = col * col;
	
	float3 T = iT.xyz;
	float3 B = cross( iN, iT.xyz ) * iT.w;
	float3 N = iN;
	
	float3 viewPos = itfpos.xyz;
	float3 viewNormal = nrm.x * T + nrm.y * B + nrm.z * N;
	float3 refView = reflect( -normalize( viewPos ), viewNormal );
	float3 refWorld = mul( mInvView, float4( refView, 0 ) ).xyz;
	
	
	float fresnelish = 1 - abs( dot( viewNormal, normalize(viewPos) ) );
	fresnelish *= fresnelish;
	
	
	float specularFactor = 0.5 * fresnelish;
	float specularPower = 256;
	
	float3 totalDiffuse = float3(0,0,0);
	float3 totalSpecular = pow( texCUBElod( EnvMap, float4( refWorld.xzy*float3(1,-1,1), 0 ) ).rgb, 2 ) * specularFactor; // float3(0,0,0);
	
	/* AMBIENT TEST */
	totalDiffuse += float3(0.01,0.01,0.01);
	
	/* POINT LIGHTS */
	float3 viewDir = normalize( viewPos );
	for( int i = 0; i < gPLightCount; ++i )
	{
		PointLight PL = gPLights[ i ];
		float3 lightViewPos = PL.vposrad.xyz;
		float3 lightDir = lightViewPos - viewPos;
		float lightDist = length( lightDir );
		lightDir /= lightDist;
		float3 lightColor = PL.colpow.rgb;
		
		float distFactor = pow( 1 - saturate( lightDist / PL.vposrad.w ), PL.colpow.w );
		float NdotL = saturate( dot( viewNormal, lightDir ) );
		
		float RdotV = saturate( dot( reflect( lightDir, viewNormal ), viewDir ) );
		float specAmount = pow( RdotV, specularPower ) * sqrt( specularPower ) * specularFactor * PL.vposrad.w / 10;
		
		totalDiffuse += lightColor * NdotL * distFactor;
		totalSpecular += lightColor * specAmount;
	}
	
	ocol0 = float4( totalDiffuse * albedo + totalSpecular, 1 );
}

#endif

