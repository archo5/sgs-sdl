
#ifdef VS

void main
(
	float4 ipos : POSITION0,
	float2 itex0 : TEXCOORD0,
	float2 itex1 : TEXCOORD1,
	out float4 opos : POSITION0,
	out float2 otex : TEXCOORD0,
	out float3 ofr : TEXCOORD1
)
{
	opos = ipos;
	otex = itex0;
	ofr = float3(itex1,1);
}

#elif defined(PS)

struct PointLight /* size: 2c */
{
	float4 vposrad;
	float4 colpow;
};

float gPLightCount : register(c28);
PointLight gPLights[32] : register(c32); /* ends before c96 */

sampler2D texRGBD : register(s0);
sampler2D texNrmS : register(s1);

float4 main( float2 itex : TEXCOORD0, float3 ifr : TEXCOORD1 ) : COLOR0
{
	float4 rgbd = tex2D( texRGBD, itex );
	float4 nrms = tex2D( texNrmS, itex );
	
	float3 viewPos = ifr * rgbd.w;
	float3 viewNormal = nrms.xyz * 2 - 1;
	
#if 0
	float3 lightViewPos = float3(25,20,27);
	
	float distfac = 10/(1+length(viewPos-lightViewPos)*10);
	float3 lightDir = normalize( lightViewPos - viewPos );
	float NdotL = saturate( dot( viewNormal, lightDir ) );
	float RdotV = saturate( dot( reflect( lightDir, viewNormal ), normalize( viewPos ) ) );
	float power = 256;
	float factor = 0.2;
	float spec = pow( RdotV, power ) * sqrt( power ) * factor;
	
//	float4 ocol = float4(normalize(lightViewPos - viewPos)*0.5+0.5,1);
	float4 ocol = float4(rgbd.rgb*(NdotL*distfac+0.01+spec),1);
//	float4 ocol = float4(rgbd.w*30,0,0,1);
//	float4 ocol = float4(viewPos,1);
#else
	float specularFactor = 0.2;
	float specularPower = 256;
	
	float3 totalDiffuse = float3(0,0,0);
	float3 totalSpecular = float3(0,0,0);
	
	/* AMBIENT TEST */
	totalDiffuse += float3(0.01,0.01,0.01);
	
	/* POINT LIGHTS */
	float3 viewDir = normalize( viewPos );
	for( int i = 0; i < gPLightCount; ++i )
	{
		PointLight PL = gPLights[ i ];
		float3 lightViewPos = PL.vposrad.xyz;
		float3 lightDir = lightViewPos - viewPos;
		float lightDist = length( lightDir );
		lightDir /= lightDist;
		float3 lightColor = PL.colpow.rgb;
		
		float distFactor = pow( 1 - saturate( lightDist / PL.vposrad.w ), PL.colpow.w );
		float NdotL = saturate( dot( viewNormal, lightDir ) );
		
		float RdotV = saturate( dot( reflect( lightDir, viewNormal ), viewDir ) );
		float specAmount = pow( RdotV, specularPower ) * sqrt( specularPower ) * specularFactor;
		
		totalDiffuse += lightColor * NdotL * distFactor;
		totalSpecular += lightColor * specAmount;
	}
	float4 ocol = float4( totalDiffuse + totalSpecular, 1 );
#endif
	ocol = sqrt( ocol );
	return ocol;
}

#endif
