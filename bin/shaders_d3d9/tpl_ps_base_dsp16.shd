
#ifdef VS

float4x4 mWorldView : register(c0);
float4x4 mProj : register(c4);

void main
(
	float4 ipos : POSITION0,
	float3 inrm : NORMAL0,
	float4 icol : COLOR0,
	float2 itex : TEXCOORD0,
	out float4 opos : POSITION0,
	out float4 otfpos : TEXCOORD1,
	out float4 oftfpos : TEXCOORD2,
	out float4 oT : TEXCOORD6,
	out float3 oN : TEXCOORD7,
	out float4 ocol : COLOR0,
	out float2 otex : TEXCOORD0
)
{
	float4 viewPos = mul( mWorldView, ipos );
	opos = mul( mProj, viewPos );
	otfpos = viewPos;
	oftfpos = opos;
	oT = float4( mul( mWorldView, float4( 1, 0, 0, 0 ) ).xyz, 1 );
	oN = mul( mWorldView, float4( inrm, 0 ) ).xyz;
	ocol = icol;
	otex = itex;
}

#elif defined(PS)

sampler2D Tex0 : register(s0);
sampler2D Tex1 : register(s1);
sampler2D Tex2 : register(s2);
sampler2D Tex3 : register(s3);
sampler2D Tex4 : register(s4);
sampler2D Tex5 : register(s5);
sampler2D Tex6 : register(s6);
sampler2D Tex7 : register(s7);
samplerCUBE EnvMap : register(s8);

float4x4 mInvView : register(c0);
float3 gAmbLightColor : register(c20);
float3 gDirLightDir : register(c21);
float3 gDirLightColor : register(c22);
struct PointLight /* size: 2c */
{
	float4 vposrad;
	float4 colpow;
};
float4 gLightCounts : register(c23);
PointLight gPLights[16] : register(c56); /* :c87 */

void main
(
	float4 inViewPos : TEXCOORD1,
	float4 inProjPos : TEXCOORD2,
	float4 inTangentSign : TEXCOORD6,
	float3 inNormal : TEXCOORD7,
	float4 icol : COLOR0,
	float4 inTex0 : TEXCOORD0,
	out float4 _outColor0 : COLOR0,
	out float4 _outColor1 : COLOR1,
	out float4 _outColor2 : COLOR2
)
{
	float RdotV, specAmount;
	
	float3 viewPos = inViewPos.xyz;
	float3 viewDir = normalize( viewPos );
	
	float3 T = inTangentSign.xyz;
	float3 B = cross( inNormal, inTangentSign.xyz ) * inTangentSign.w;
	float3 N = inNormal;
	
	float3x3 TBN = float3x3( T, B, N );
	
	float3 outDiffuseColor = float3( 0.7, 0.7, 0.7 );
	float outOpacity = 1.0;
	float3 outSpecularColor = float3( 0.3, 0.3, 0.3 );
	float outSpecularPower = 32;
	float3 outNormal = inNormal;
	float2 outDistortion = float2( 0, 0 );
	float3 outAmbientDiffuseLight = float3( 0, 0, 0 );
	float3 outAmbientSpecularLight = float3( 0, 0, 0 );
	{
__CODE__
	}
	
	float3 refView = reflect( -viewDir, outNormal );
	float3 refWorld = mul( mInvView, float4( refView, 0 ) ).xyz;
	
	float3 totalDiffuse = gAmbLightColor + outAmbientDiffuseLight;
	float3 totalSpecular = outAmbientSpecularLight + pow( texCUBElod( EnvMap, float4( refWorld.xzy*float3(1,-1,1), 1 ) ).rgb, 2 );
	
	/* DIR.AMB. LIGHT */
	/* TODO */
	
	/* DIRECTIONAL LIGHT */
	totalDiffuse += saturate( dot( outNormal, gDirLightDir ) ) * gDirLightColor;
	RdotV = saturate( dot( reflect( gDirLightDir, outNormal ), viewDir ) );
	specAmount = pow( RdotV, outSpecularPower ) * sqrt( outSpecularPower );
	totalSpecular += gDirLightColor * specAmount;
	
	/* POINT LIGHTS */
	for( int i = 0; i < gLightCounts.x; ++i )
	{
		PointLight PL = gPLights[ i ];
		float3 lightViewPos = PL.vposrad.xyz;
		float3 lightDir = lightViewPos - viewPos;
		float lightDist = length( lightDir );
		lightDir /= lightDist;
		float3 lightColor = PL.colpow.rgb;
		
		float distFactor = pow( 1 - saturate( lightDist / PL.vposrad.w ), PL.colpow.w );
		float NdotL = saturate( dot( outNormal, lightDir ) );
		
		RdotV = saturate( dot( reflect( lightDir, outNormal ), viewDir ) );
		specAmount = pow( RdotV, outSpecularPower ) * sqrt( outSpecularPower ) * PL.vposrad.w / 10;
		
		totalDiffuse += lightColor * NdotL * distFactor;
		totalSpecular += lightColor * specAmount;
	}
	
	_outColor0 = float4( totalDiffuse * outDiffuseColor + totalSpecular * outSpecularColor, outOpacity );
	_outColor1 = float4( outDistortion, 0, outOpacity );
	_outColor2 = float4( 1 / inViewPos.z, 0, 0, 1 );
}

#endif

