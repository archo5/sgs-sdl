
include "ss3d";

function configure()
{
}

function initialize()
{
	global Window = SS_CreateWindow( "SGS-SDL Game Framework", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1024, 576, SDL_WINDOW_OPENGLMAYBE );
	Window.initRenderer( SS_RENDERER_DONTCARE, SS_RENDERER_DONTCARE, SS_RENDERER_VSYNC );
	
	_R.SS3D = SS3D_CreateRenderer( Window.renderingAPI, 0/* Window.rendererVersion */, Window.rendererPtr );
	println( "SS3D: " $ _R.SS3D );
	
	_R.VD1 = _R.SS3D.createVertexDecl( "|pf3nf30f2" );
	println( "VD1: " $ _R.VD1 );
	
	_R.Scene = _R.SS3D.createScene();
	println( "Scene: " $ _R.Scene );
	_R.SS3D.currentScene = _R.Scene;
	
	_R.Light = _R.Scene.createLight();
	println( "Light: " $ _R.Light );
	_R.Scene.destroyLight( _R.Light );
	println( "After destruction: " $ _R.Light );
	_R.Light = light = _R.Scene.createLight();
	println( "New light: " $ light );
	light.type = SS3DLIGHT_POINT;
	light.color = vec3(0.9,0.7,0.5);
	light.position = vec3(10,0,5);
	light.range = 50;
	light.power = 2;
	light.isEnabled = true;
	printvar( light );
	
	_R.Light2 = light2 = _R.Scene.createLight();
	println( "New light (2): " $ light2 );
	light2.type = SS3DLIGHT_POINT;
	light2.color = vec3(0.5,0.7,0.9);
	light2.position = vec3(-10,0,5);
	light2.range = 50;
	light2.power = 2;
	light2.isEnabled = true;
	printvar( light2 );
	
	global camera = _R.Camera = SS3D_CreateCamera();
	camera.position = vec3(10,10,10);
	camera.direction = vec3(-1,-1,-1);
	camera.aspect = 16/9;
	printvar( camera );
	
	_R.Scene.camera = camera;
	
	println( "Shader: " $ _R.SS3D.getShader( "pp_combine" ) );
	pcall(function(){ println( "No shader: " $ _R.SS3D.getShader( "pp_combine_doesnotexist" ) ); },function(type,msg){println(msg);});
}

function update()
{
	SS_Clear( color(0.1,0.2,0.4) );
	
	t = ftime();
	camera.position = vec3(cos(t)*20,sin(t)*20,10);
	camera.direction = vec3(-cos(t),-sin(t),-0.8);
	
	_R.SS3D.render();
	SS_Present();
}

function on_event( e )
{
	if( e.type == SDL_QUIT )
		global sys_exit = true;
}
