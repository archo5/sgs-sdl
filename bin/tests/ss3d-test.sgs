
include "ss3d";

function configure()
{
}

function initialize()
{
	global Window = SS_CreateWindow( "SGS-SDL Game Framework", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1024, 576, SDL_WINDOW_OPENGLMAYBE );
	Window.initRenderer( SS_RENDERER_DONTCARE, SS_RENDERER_DONTCARE, SS_RENDERER_VSYNC );
	SS_InitDrawFunctions();
	
	global Font = SS_CreateFont( "verdana.ttf", 12 );
	
	_R.SS3D = SS3D_CreateRenderer( Window.renderingAPI, 0/* Window.rendererVersion */, Window.rendererPtr );
	println( "SS3D: " $ _R.SS3D );
	
	_R.Scene = _R.SS3D.createScene();
	println( "Scene: " $ _R.Scene );
	_R.SS3D.currentScene = _R.Scene;
	
	_R.VD1 = _R.SS3D.createVertexDecl( "pf3nf3tf40f2" );
	println( "VD1: " $ _R.VD1 );
	
	_R.RT = _R.SS3D.createRT( Window.width, Window.height, SS3DRT_FORMAT_BACKBUFFER );
	println( "RT: " $ _R.RT );
	
	_R.Mesh = _R.SS3D.createMesh();
	{
		_R.PlaneMesh = _R.SS3D.createMesh();
		vdata = fmt_pack( "12f 12f 12f 12f",
			-50, -50, 0,  0, 0, 1,  1, 0, 0, 1,  0, 0,
			 50, -50, 0,  0, 0, 1,  1, 0, 0, 1,  1, 0,
			 50,  50, 0,  0, 0, 1,  1, 0, 0, 1,  1, 1,
			-50,  50, 0,  0, 0, 1,  1, 0, 0, 1,  0, 1 );
		_R.PlaneMesh.setVertexData( vdata, _R.VD1, false );
		_R.PlaneMesh.setIndexData( fmt_pack( "6w", 0, 1, 2, 2, 3, 0 ), false );
		_R.PlaneMesh.numParts = 1;
		_R.PlaneMesh.setPartRanges( 0, 0, 4, 0, 6 );
	//	_R.PlaneMesh.transparent = true;
		_R.PlaneMesh.setPartShader( 0, "mirror" );//"testFRrender" );
		_R.PlaneMesh.setPartTexture( 0, 0, _R.SS3D.getTexture( "testdata/concretewall5.dds" ) );
		_R.PlaneMesh.setPartTexture( 0, 1, _R.SS3D.getTexture( "testdata/concretewall5normal.png" ) );
		_R.PlaneMeshMI = _R.Scene.createMeshInstance();
		_R.PlaneMeshMI.mesh = _R.PlaneMesh;
		_R.PlaneMesh.setPartTexture( 0, 2, _R.RT );
	}
	if(0)
	{
		mesh = unserialize( io_file_read( "testdata/bunny.ssm" ) );
		shader = _R.SS3D.getShader( "testFRrender2" );
		texture = _R.SS3D.getTexture( "testdata/red.png" );
		material = _R.SS3D.createMaterial();
		material.shader = shader;
		material.setTexture( 0, texture );
		_R.MeshVD = _R.SS3D.createVertexDecl( mesh.format );
		_R.Mesh.setVertexData( mesh.vdata, _R.MeshVD, false );
		_R.Mesh.setIndexData( mesh.idata, true );
		_R.Mesh.numParts = 1;
		_R.Mesh.setPart( 0, material, 0, mesh.vcount, 0, mesh.icount );
	}
	else if(1)
	{
		mesh = io_file_read( "testdata/bunny.real.ssm" );
		_R.Mesh.loadFromBuffer( mesh );
	}
	else
	{
		shader = _R.SS3D.getShader( "testFRrender2" );
		texture = _R.SS3D.getTexture( "testdata/red.png" );
		material = _R.SS3D.createMaterial();
		material.shader = shader;
		material.setTexture( 0, texture );
		_R.Mesh = SS3D_CreateCubeMesh( _R.SS3D, material, 0.55 );
		
		insts = [];
		for( y = -32; y < 32; ++y )
		{
			for( x = -32; x < 32; ++x )
			{
				inst = _R.Scene.createMeshInstance();
				printvar(inst);
				inst.mesh = _R.Mesh;
				inst.matrix = mat4(
					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					x, y, rand() % 3, 1
				);
				insts.push( inst );
			}
		}
		_R.insts = insts;
	}
	
	// PARTICLES
	_R.Particles = floatarray_buffer( 128 * 3 );
	_R.Particles.randbox( vec3(-10,-10,0), vec3(10,10,5) );
	_R.ParticleColors = floatarray( 1, 1, 1, 0.3 );
	_R.ParticleSizes = floatarray( 5 );
	
//	_R.ParticleMtl = _R.SS3D.createMaterial();
//	_R.ParticleMtl.transparent = true;
//	_R.ParticleMtl.shader = _R.SS3D.getShader( "sprite" );
//	_R.ParticleMtl.setTexture( 0, _R.SS3D.getTexture( "testdata/smoke.png" ) );
//	_R.ParticleMtl.setTexture( 1, _R.SS3D.getTexture( "testdata/smoke_normal.png" ) );
	
	_R.ParticleMesh = _R.SS3D.createMesh( true );
	_R.ParticleMesh.numParts = 1;
	_R.ParticleMesh.transparent = true;
	_R.ParticleMesh.setPartShader( 0, "sprite" );
	_R.ParticleMesh.setPartTexture( 0, 0, _R.SS3D.getTexture( "testdata/smoke.png" ) );
	_R.ParticleMesh.setPartTexture( 0, 1, _R.SS3D.getTexture( "testdata/smoke_normal.png" ) );
	
	_R.ParticleMI = _R.Scene.createMeshInstance();
	_R.ParticleMI.mesh = _R.ParticleMesh;
	
	
	_R.MI = _R.Scene.createMeshInstance();
	_R.MI.mesh = _R.Mesh;
	
	_R.Light = _R.Scene.createLight();
	println( "Light: " $ _R.Light );
	_R.Scene.destroyLight( _R.Light );
	println( "After destruction: " $ _R.Light );
	_R.Light = light = _R.Scene.createLight();
	println( "New light: " $ light );
	light.type = SS3DLIGHT_POINT;
	light.color = vec3(0.9,0.7,0.5);
	light.position = vec3(10,0,5);
	light.range = 50;
	light.power = 2;
	light.isEnabled = true;
	printvar( light );
	
	_R.Light2 = light2 = _R.Scene.createLight();
	println( "New light (2): " $ light2 );
	light2.type = SS3DLIGHT_POINT;
	light2.color = vec3(0.5,0.7,0.9);
	light2.position = vec3(-10,0,5);
	light2.range = 50;
	light2.power = 2;
	light2.isEnabled = true;
	printvar( light2 );
	
	_R.Light3 = light3 = _R.Scene.createLight();
	light3.type = SS3DLIGHT_SPOT;
	light3.color = vec3(1.9,1.0,0.1);
	light3.position = vec3(0,10,10);
	light3.range = 50;
	light3.power = 2;
	light3.direction = vec3(0,-1,-1).normalized;
	light3.updir = vec3(0,0,1);
	light3.angle = 90;
	light3.isEnabled = 1;
	light3.genProjMatrix();
	light3.cookieTexture = _R.SS3D.getTexture( "testdata/cookie1.png" );
	println( "SPOTLIGHT PROJECTION MATRIX" );
	printvar( light3.projMatrix );
	
	global camera = _R.Camera = SS3D_CreateCamera();
	camera.position = vec3(10,10,10);
	camera.direction = vec3(-1,-1,-1);
	camera.aspect = 16/9;
	printvar( camera );
	
	_R.Scene.camera = camera;
	
	println( "Shader: " $ _R.SS3D.getShader( "pp_combine" ) );
	pcall(function(){ println( "No shader: " $ _R.SS3D.getShader( "pp_combine_doesnotexist" ) ); },function(type,msg){println(msg);});
}

function update()
{
	SS_Clear( color(0.1,0.2,0.4) );
	
	t = ftime();
	camera.position = vec3(cos(t)*20,sin(t)*20,13);
	camera.direction = vec3(-cos(t),-sin(t),-0.6);
	
	_R.PlaneMeshMI.enabled = false;
	_R.SS3D.currentRT = _R.RT;
	_R.SS3D.disablePostProcessing = true;
	camera.position *= vec3(1,1,-1);
	camera.direction *= vec3(1,1,-1);
	camera.up *= vec3(1,1,-1);
	camera.genViewMatrix();
	
	SS3D_UpdateParticleMesh( _R.SS3D, _R.ParticleMesh, camera.viewMatrix, _R.Particles, _R.ParticleSizes, _R.ParticleColors );
	_R.SS3D.render();
	
	_R.PlaneMeshMI.enabled = true;
	_R.SS3D.currentRT = null;
	_R.SS3D.disablePostProcessing = false;
	camera.position *= vec3(1,1,-1);
	camera.direction *= vec3(1,1,-1);
	camera.up *= vec3(1,1,-1);
	camera.genViewMatrix();
	
	SS3D_UpdateParticleMesh( _R.SS3D, _R.ParticleMesh, camera.viewMatrix, _R.Particles, _R.ParticleSizes, _R.ParticleColors );
	_R.SS3D.render();
	
	point = camera.worldToScreen( vec3(-5,0,10) );
	SS_SetCameraUI( 0, Window.width, 0, Window.height );
	
	if( 0 )
	{
		text = "#4293075";
		width = Font.getTextLength( text );
		tX = point.x * Window.width;
		tY = point.y * Window.height;
		SS_DrawColorRect_WH( tX - 2, tY - 2, width + 4, Font.size + 4, 0.1, 0.2, 0.4, 0.5 );
		SS_DrawTextLine( text, Font, tX, tY, color(1,1,1,1) );
	}
	
	SS_Present();
}

function on_event( e )
{
	if( e.type == SDL_QUIT )
		global sys_exit = true;
}
