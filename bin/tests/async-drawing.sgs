
function draw_ticking_text()
{
	str = "Gradually appearing text...";
	i = 0;
	subthread (function() use( i ){ for(;;){ i++; yield( 0.2 ); } })();
	for(;;)
	{
		tx = string_part( str, 0, i % str.length );
		SS_DrawTextLine( tx, Font, 20, 20, color(1,1,1) );
		yield();
	}
}

function draw_moveline( from, to )
{
	from = clone( from );
	to = clone( to );
	
	yield();
	fade = 1.0;
	subthread (function() use( fade ){ for(;;){ fade -= 1/60; yield( 1/60 ); } })();
	while( fade > 0 )
	{
		SS_DrawColorLine( from.x, from.y, to.x, to.y, 1, 0, 0, fade );
		yield();
	}
}

function draw_racing()
{
	for(;;)
	{
		pos_walk = 0;
		pos_drive = 0;
		done = false;
		
		race_walk = subthread (function() use( pos_walk ){ for(;;){ pos_walk += 60/60; if( pos_walk > 400 ) return; yield( 1/60 ); } })();
		race_drive = subthread (function() use( pos_drive ){ for(;;){ pos_drive += 110/60; if( pos_drive > 400 ) return; yield( 1/60 ); } })();
		draw = subthread (function() use( pos_walk, pos_drive, done )
		{
			for(;;)
			{
				yield();
				offx = 32;
				offy = 96;
				len = 400;
				SS_DrawColorLine( offx, offy, offx, offy + 60, 0, 0, 1, 1 );
				SS_DrawColorLine( offx + len, offy, offx + len, offy + 60, 0, 0, 1, 1 );
				SS_DrawColorRect_WH( offx, offy + 12, pos_walk, 12, 1, 0, 0, 1 );
				SS_DrawColorRect_WH( offx, offy + 36, pos_drive, 12, 0, 1, 0, 1 );
				SS_DrawTextLine( "walk", Font, offx + pos_walk, offy + 12, color(1,0,0) );
				SS_DrawTextLine( "drive", Font, offx + pos_drive, offy + 36, color(0,1,0) );
				if( done )
				{
					SS_DrawTextLine( "DONE", Font, offx, offy - 12, color(1,1,1) );
				}
			}
		})();
		
		race( race_walk, race_drive );
		altdone = subthread (function() use( done ){ for(;;){ done = !done; yield( 1/8 ); } })();
		yield( 1 );
		abort( draw, altdone );
	}
}

function draw_question( question, answers )
{
	x = 64;
	y = 400;
	sel = null;
	for(;;)
	{
		height = 64 + dict_size( answers ) * 24;
		SS_DrawColorRect_WH( x, y, 400, height, 0, 0, 0, 0.5 );
		SS_DrawTextLine( question, Font, x, y, color(1,1,1) );
		
		i = 0;
		mon = null;
		selfunc = null;
		foreach( func, name : answers )
		{
			ay = y + 64 + i * 24;
			mouseon = mpos.x >= x && mpos.x < x + 400 && mpos.y >= ay && mpos.y < ay + 24;
			if( mouseon )
				mon = i;
			issel = i === sel;
			if( issel )
				selfunc = func;
			SS_DrawColorRect_WH( x, ay, 400, 24, mouseon - issel * 0.5, 0, 0, 0.5 );
			SS_DrawTextLine_VC( name, Font, x, ay + 12, color(1) );
			i++;
		}
		
		if( curclick && !prevclick )
			sel = mon;
		else if( !curclick && prevclick )
		{
			if( sel !== null && mon === sel )
			{
				thread _G[ "q_" $ selfunc ]();
				return;
			}
			sel = null;
		}
		
		yield;
	}
}

function q_step0(){ draw_question( "why not?", { "step1" = "Well, let me think about it", "step0" = "No reason" } ); }
function q_step1(){ draw_question( "shall we proceed?", { "step2" = "Yes", "step0" = "No", "info" = "Tell me more" } ); }
function q_info(){ draw_question( "This is a test dialog", { "step1" = "Ok, got it" } ); }
function q_step2(){ draw_question( "what should we do?", { "action1" = "Let's do the action 1", "action2" = "Let's do the action 2", "step1" = "Let's take a step back" } ); }
function q_action1(){ draw_question( "Action 1 done!", { "step2" = "Ok!" } ); }
function q_action2(){ draw_question( "Action 2 done!", { "step2" = "Ok!" } ); }

function initialize()
{
	global mpos = vec2( 0, 0 );
	global opos = vec2( 0, 0 );
	global curclick = false;
	global prevclick = false;
	global W = 1024, H = 576;
	global Window = SS_CreateWindow( "SGS-SDL Game Framework", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1024, 576, SDL_WINDOW_OPENGLMAYBE );
	Window.initRenderer( SS_RENDERER_DONTCARE, SS_RENDERER_VSYNC );
	global Font = SS_CreateFont( "fonts/lato-regular.ttf", 12 );
	SS_InitDrawFunctions();
	
	thread draw_ticking_text();
	thread draw_racing();
	thread q_step1();
}

global prevTime = ftime();
function update()
{
	numallocs = sys_stat(4);
	SS_Clear( color(0.25,0.3,0.4) );
	SS_SetCameraUI( 0, W, 0, H );
	curTime = ftime();
	deltaTime = curTime - prevTime;
	global prevTime = curTime;
	if( deltaTime > 1/15 )
		deltaTime = 1/15;
	process_threads( deltaTime );
	
	SS_DrawTextLine( "thread count: " $ sys_stat(1), Font, 900, 32, color(1,1,1) );
	SS_DrawTextLine( "allocs per frame: " $ (sys_stat(4) - numallocs), Font, 900, 4, color(1,1,1) );
	SS_Present();
	
	global prevclick = curclick;
}

function on_event( e )
{
	if( e.type == SDL_QUIT )
		global sys_exit = true;
	if( e.type == SDL_MOUSEMOTION )
	{
		npos = vec2( e.x, e.y );
		if( ( opos - npos ).length > 2 )
		{
			thread draw_moveline( opos, npos );
			global opos = npos;
		}
		global mpos = npos;
	}
	else if( e.type == SDL_MOUSEBUTTONDOWN )
		global curclick = true;
	else if( e.type == SDL_MOUSEBUTTONUP )
		global curclick = false;
}
