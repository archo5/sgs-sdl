
include "utils/transform_gizmo";


global g_MousePos = vec2( 0, 0 );

function configure()
{
}

function initialize()
{
	global Window = SS_CreateWindow( "SGS-SDL Game Framework - Transform Gizmo", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1024, 576, SDL_WINDOW_OPENGLMAYBE );
	Window.initRenderer( SS_RENDERER_DONTCARE, SS_RENDERER_VSYNC );
	SS_InitDrawFunctions();
	global Font = SS_CreateFont( "fonts/lato-regular.ttf", 12 );
	
	global TFG = TransformGizmo.create();
	global curref = null;
	global tfref = null;
}


function drawtick( p, r, g, b )
{
	g_RB.begin()
		.f( p.x - 1, p.y - 1, p.z - 1, p.x + 1, p.y + 1, p.z + 1 )
		.f( p.x - 1, p.y + 1, p.z - 1, p.x + 1, p.y - 1, p.z + 1 )
		.f( p.x + 1, p.y + 1, p.z - 1, p.x - 1, p.y - 1, p.z + 1 )
		.f( p.x + 1, p.y - 1, p.z - 1, p.x - 1, p.y + 1, p.z + 1 )
		.c4b( r, g, b, 1 ).interlace( 4, 12, 12 )
		.draw( null, SS_MakeVertexFormat( "pf3cb4" ), 0, g_RB.size / 16, SS_PT_LINES );
}

function update()
{
	W = Window.bbWidth;
	H = Window.bbHeight;
	
	SS_Clear( color(0.1,1) );
	
	cam3d = SS_GetCamera3D( vec3(100,100,100), vec3(-1,-1,-1), vec3(0,0,1), deg2rad(90), W/H, 1, 1000 );
	SS_SetCamera( cam3d[0], cam3d[1] );
	mtx_total = cam3d[0].multiply( cam3d[1] );
	mtx_inv = mat4();
	mtx_inv.invert_from( mtx_total );
	tf_in_pos = vec3( g_MousePos.x / W * 2 - 1, g_MousePos.y / H * -2 + 1, 0 );
	r_from = mtx_inv.transform_pos( tf_in_pos - vec3( 0, 0, 1 ) );
	r_to = mtx_inv.transform_pos( tf_in_pos + vec3( 0, 0, 1 ) );
	global tfref, curref;
	iref = TFG.getInteractRef( vec3(-1,-1,-1), vec3(0,0,1), r_from, r_to );
	if( tfref === null )
	{
		TFG.updateInteractions( r_from, r_to );
		curref = iref;
	}
	else
	{
		if( TFG.mode == TFG.TGM_MOVE && iref !== null )
			TFG.position = iref - tfref;
	}
	
	SS_SetDepthTest( true );
	TFG.draw( vec3(-1,-1,-1), vec3(0,0,1) );
	if( typeof(iref) == "vec3" ) drawtick( iref, 1, 0, 0 );
	if( typeof(curref) == "vec3" ) drawtick( curref, 0, 1, 0 );
	if( typeof(tfref) == "vec3" ) drawtick( tfref, 0, 0, 1 );
	SS_SetDepthTest( false );
	
	SS_SetCameraUI( 0, W, 0, H );
	SS_DrawTextLine( "1/2/3 - move/rotate/scale", Font, 4, 4, color(1) );
	SS_DrawTextLine( "interaction: " $ TFG.iacts, Font, 4, 18, color(1) );
	SS_DrawTextLine( "interact ref: " $ curref, Font, 4, 32, color(1) );
	
	SS_Present();
}

function on_event( e )
{
	if( e.type == SDL_QUIT )
		global sys_exit = true;
	if( e.type == SDL_MOUSEMOTION )
		global g_MousePos = vec2( e.x, e.y );
	if( e.type == SDL_KEYDOWN && !e.repeat )
	{
		if( e.keycode == SDLK_1 ){ TFG.mode = TransformGizmo.TGM_MOVE; }
		if( e.keycode == SDLK_2 ){ TFG.mode = TransformGizmo.TGM_ROTATE; }
		if( e.keycode == SDLK_3 ){ TFG.mode = TransformGizmo.TGM_SCALE; }
	}
	if( e.type == SDL_MOUSEBUTTONDOWN && e.button == 1 )
	{
		global tfref = curref;
		if( TFG.mode == TFG.TGM_MOVE && tfref !== null )
			tfref -= TFG.position;
	}
	if( e.type == SDL_MOUSEBUTTONUP && e.button == 1 ){ global tfref = null; }
}

function cleanup()
{
}
