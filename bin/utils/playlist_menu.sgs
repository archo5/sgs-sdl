

global PlaylistMenu =
{
	ACT_SELECT_UP = 1,
	ACT_SELECT_DOWN = 2,
	ACT_ACTIVATE = 3,
};

/*
	PlaylistMenu
	
	options: array of items:
	- id // the key to use to modify some properties at runtime
	- text // the label
	- action // function to call on click
	- [opt] visible // whether to show the item
	- [opt] icon // the name of the icon to use for the item
*/

function PlaylistMenu.create( options, params )
{
	params ||= {};
	
	ids = {};
	
	foreach( opt : options )
	{
		if( isset( opt, "id" ) ) ids[ opt.id ] = opt;
		if( !isset( opt, "text" ) ) opt.text = "<unnamed>";
		if( !isset( opt, "visible" ) ) opt.visible = true;
		if( isset( opt, "icon" ) )
		{
			opt.icon_texture = SS_CreateTexture( "ui/icons/"$opt.icon$".png" );
		}
	}
	
	data =
	{
		options = options,
		mouseon = false,
		clicked = false,
		ontime = 0,
		scroll = 0,
		scrollraw = 0,
		_scrfrom = 0,
		_scrto = 0,
		_scrtime = 0,
	};
	data = get_merged( params, data );
	if( !isset( data, "x" ) ) data.x = 100;
	if( !isset( data, "y" ) ) data.y = 100;
	if( !isset( data, "scale" ) ) data.scale = 1;
	if( !isset( data, "font" ) ) data.font = "fonts/lato-regular.ttf";
	if( !isset( data, "fontsize" ) ) data.fontsize = 14;
	if( !isset( data, "padding" ) ) data.padding = 6;
	if( !isset( data, "vspace" ) ) data.vspace = 0;
	if( !isset( data, "width" ) ) data.width = 400;
	if( !isset( data, "height" ) ) data.height = 400;
	if( !isset( data, "scrollbarsize" ) ) data.scrollbarsize = 32;
	if( !isset( data, "border" ) ) data.border = 2;
	
	data.x *= data.scale; // scale these to preserve in-screen placement
	data.y *= data.scale; // --
	data.fontsize *= data.scale;
	data.vspace *= data.scale;
	data.width *= data.scale;
	data.height *= data.scale;
	data.font = SS_CreateFont( data.font, data.fontsize );
	
	totalheight = -data.vspace;
	fht = data.fontsize + data.padding * 2 + data.vspace;
	foreach( opt : options )
	{
		if( opt.visible )
			totalheight += fht;
	}
	data.totalheight = totalheight;
	
	return class( data, PlaylistMenu );
}

function PlaylistMenu.resize( w, h )
{
	this.width = w * this.scale;
	this.height = h * this.scale;
	this.mousewheel( 0 );
}

function PlaylistMenu.mousemove( x, y )
{
	B = this.border;
	X = this.x + B;
	Y = this.y + B;
	W = this.width - B * 2;
	H = this.height - B * 2;
	
	cy = Y - this.scroll;
	pmo = this.mouseon;
	this.mouseon = false;
	if( x >= X && x < X + W &&
		y >= Y && y < Y + H )
	{
		foreach( oid, option : this.options )
		{
			if( !option.visible )
				continue;
			
			fht = this.fontsize + this.padding * 2;
			
			if( y >= cy && y < cy + fht )
			{
				if( pmo !== oid )
					this.ontime = 0;
				this.mouseon = oid;
				break;
			}
				
			cy += fht + this.vspace;
		}
	}
}

function PlaylistMenu.do_action( which )
{
	item = this.options[ which ];
	if( isset( item, "action" ) )
		item.action( item );
}

function PlaylistMenu.mouseclick( down )
{
	if( down )
		this.clicked = this.mouseon;
	else
	{
		if( this.clicked !== false && this.mouseon === this.clicked )
			this.do_action( this.clicked );
		this.clicked = false;
	}
}

function PlaylistMenu.mousewheel( delta )
{
	osr = this.scrollraw;
	this.scrollraw = clamp( this.scrollraw - delta * 32 * this.scale, 0, max( 0, this.totalheight - this.height ) );
	this._scrfrom = this.scroll;
	this._scrto = this.scrollraw;
	this._scrtime = 0;
	if( this.scrollraw != osr )
		this.mousemove( this.x - 1, 0 );
}

function PlaylistMenu._clamp_mouseon()
{
	if( !this.options.size )
	{
		this.mouseon = false;
		return;
	}
	this.mouseon %= this.options.size;
	if( this.mouseon < 0 )
		this.mouseon += this.options.size;
}

function PlaylistMenu.special_action( act )
{
	pmo = this.mouseon;
	if( act == PlaylistMenu.ACT_SELECT_UP )
	{
		if( this.mouseon === false )
			this.mouseon = this.options.size - 1;
		else
			this.mouseon--;
		this._clamp_mouseon();
	}
	else if( act == PlaylistMenu.ACT_SELECT_DOWN )
	{
		if( this.mouseon === false )
			this.mouseon = 0;
		else
			this.mouseon++;
		this._clamp_mouseon();
	}
	else if( act == PlaylistMenu.ACT_ACTIVATE )
	{
		if( this.mouseon !== false )
			this.do_action( this.mouseon );
	}
	if( pmo !== this.mouseon )
		this.ontime = 0;
}

function PlaylistMenu.on_event( e )
{
	if( e.type == SDL_MOUSEMOTION )
		this.mousemove( e.x, e.y );
	else if( ( e.type == SDL_MOUSEBUTTONDOWN || e.type == SDL_MOUSEBUTTONUP ) && e.button == 1 )
		this.mouseclick( e.type == SDL_MOUSEBUTTONDOWN );
	else if( e.type == SDL_MOUSEWHEEL )
		this.mousewheel( e.y );
	else if( e.type == SDL_KEYDOWN )
	{
		if( e.keycode == SDLK_UP )
			this.special_action( PlaylistMenu.ACT_SELECT_UP );
		else if( e.keycode == SDLK_DOWN )
			this.special_action( PlaylistMenu.ACT_SELECT_DOWN );
		else if( e.keycode == SDLK_RETURN )
			this.special_action( PlaylistMenu.ACT_ACTIVATE );
	}
}

function PlaylistMenu.draw( delta )
{
	B = this.border;
	X = this.x + B;
	Y = this.y + B;
	W = this.width - B * 2;
	H = this.height - B * 2;
	
	this._scrtime += delta;
	this.scroll = lerp( this._scrfrom, this._scrto, 1 - pow( 1 - clamp( this._scrtime * 2, 0, 1 ), 2 ) );
	
	this.ontime += delta;
	cy = Y - this.scroll;
	if( SS_SetClipRect( this.x, this.y, this.x + this.width + 1, this.y + this.height + 1 ) )
	{
		SS_DrawColorRect_WH( this.x + B, this.y + B, this.width - B*2, this.height - B*2, 0.4, 0.4, 0.4, 0.1 );
		if( B )
		{
			Bbr = 0.6;
			Bal = 0.1;
			SS_DrawColorRect_WH( this.x, this.y, this.width, B, Bbr, Bbr, Bbr, Bal );
			SS_DrawColorRect_WH( this.x, this.y + this.height - B, this.width, B, Bbr, Bbr, Bbr, Bal );
			SS_DrawColorRect_WH( this.x, this.y + B, B, this.height - B * 2, Bbr, Bbr, Bbr, Bal );
			SS_DrawColorRect_WH( this.x + this.width - B, this.y + B, B, this.height - B * 2, Bbr, Bbr, Bbr, Bal );
		}
		if( SS_SetClipRect( X, Y, X + W + 1, Y + H + 1 ) )
		{
			foreach( oid, option : this.options )
			{
				if( !option.visible )
					continue;
				
				fht = this.fontsize + this.padding * 2;
				
				ix = X;
				
				cymid = cy + fht * 0.5;
				ta = clamp( ( cymid - Y ) / clamp( this.scroll / 8, 1, 32 ), 0, 1 )
					*clamp( ( Y + H - cymid ) / clamp( ( this.totalheight - H - this.scroll ) / 8, 1, 32 ), 0, 1 );
				cfc = if(this.mouseon === oid,0.3-if(this.clicked === oid,0.2,0),0);
				SS_DrawColor2VRect_WH( ix, cy, this.width, fht,
					0.0 + cfc, 0.0 + cfc, 0.0 + cfc, 0.0 + cfc * 0.5 * ta,
					0.0 + cfc * 0.5, 0.05 + cfc * 0.5, 0.1 + cfc * 0.5, 0.1 * ta );
				
				if( this.mouseon === oid )
				{
					SS_SetBlending( SS_BLENDOP_ADD, SS_BLEND_SRCALPHA, SS_BLEND_ONE );
					SS_DrawColorRect_WH( ix, cy, this.width, fht, 1, 1, 1, pow( 1/(1+this.ontime), 16 ) * 0.1 );
					SS_SetBlending( SS_BLENDOP_ADD, SS_BLEND_SRCALPHA, SS_BLEND_INVSRCALPHA );
				}
				
				if( this.mouseon === oid )
				{
					ix += if( this.ontime > 0.1, 0.1, this.ontime ) * 64;
					textcolor = color(1,0.75,0.5,ta);
				}
				else
					textcolor = color(1,1,1,ta);
				SS_DrawTextLine_VC( option.text, this.font, ix + this.padding, cy + this.padding+1 + this.fontsize / 2, color(0,0,0,0.3*ta) );
				SS_DrawTextLine_VC( option.text, this.font, ix + this.padding, cy + this.padding + this.fontsize / 2, textcolor );
				cy += fht + this.vspace;
			}
		}
		SS_SetClipRect( null );
	}
}
