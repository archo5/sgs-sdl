
global _efn = function(){};


global UIControl =
{
	/* references */
	parent = null,
	
	/* states */
	clicked = false,
	mouseon = false,
	
	/* processing */
	on_draw = null,
};

/* DEFAULT events */
UIControl.onclick = _efn;
function UIControl.onhittest( x, y )
{
	return this.x <= x && this.x + this.w >= x
		&& this.y <= y && this.y + this.h >= y;
}
function UIControl.onenter(){ this.mouseon = true; }
function UIControl.onleave(){ this.mouseon = false; }
function UIControl.onmousedown(){ if( this.mouseon ) this.clicked = true; }
function UIControl.onmouseup(){ if( this.mouseon ) this.onclick(); this.clicked = false; }

/* PROCESSING */
function UIControl.get_ctrl_at( x, y )
{
	for( var i = this.children.size - 1; i >= 0; --i )
	{
		var sub = this.children[ i ].get_ctrl_at( x, y );
		if( sub !== null )
			return sub;
	}
	if( this.onhittest( x, y ) )
		return this;
	return null;
}
function UIControl.add_child( ch )
{
	ch.parent = this;
	this.children.push( ch );
}

function ui_create_control( override )
{
	var data = { children = [] };
	foreach( i : override )
		data[ i ] = override[ i ];
	return class( data, UIControl );
}

function ui_default_paint_button()
{
	var btnbgc = [ 0.1 + this.mouseon * 0.7, 0.1 + this.clicked * 0.7, 0.1, 0.5 ];
	draw({ preset = 'tile', position = [this.x,this.y], scale = [this.w,this.h], color = btnbgc });
}

function ui_create_button( name, x, y, w, h, onclick )
{
	return ui_create_control
	({
		name = name,
		type = "button",
		x = x,
		y = y,
		w = w,
		h = h,
		onclick = onclick,
		on_draw = ui_default_paint_button
	});
}


global UIFrame =
{
	name = "__frame__",
	type = "frame",
	x = 0,
	y = 0,
	w = 9999,
	h = 9999,
	
	curhover = null,
	curclick = null,
};

function UIFrame.event( e )
{
	if( e.type == SDL_MOUSEMOTION )
	{
		var ctrl = this.get_ctrl_at( e.x, e.y );
		if( ctrl !== this.curhover )
		{
			if( this.curhover !== null )
				this.curhover.onleave();
			this.curhover = ctrl;
			ctrl.onenter();
		}
	}
	if( e.type == SDL_MOUSEBUTTONDOWN || e.type == SDL_MOUSEBUTTONUP )
	{
		var ctrl = this.get_ctrl_at( e.x, e.y );
		if( e.type == SDL_MOUSEBUTTONDOWN )
		{
			ctrl.onmousedown( e.x, e.y, e.button );
			this.curclick = ctrl;
		}
		else
		{
			ctrl.onmouseup( e.x, e.y, e.button );
			if( this.curclick !== null && ctrl !== this.curclick )
				this.curclick.onmouseup( e.x, e.y, e.button );
			this.curclick = null;
		}
	}
}

function UIFrame.draw()
{
	foreach( idx : this.children )
	{
		if( this.children[ idx ].on_draw )
			this.children[ idx ].on_draw();
	}
}

function ui_create_frame()
{
	return ui_create_control( UIFrame );
}
